(()=>{"use strict";var r={392:(r,e,t)=>{t.d(e,{Z:()=>s});var n=t(537),o=t.n(n),i=t(645),a=t.n(i)()(o());a.push([r.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500&display=swap);"]),a.push([r.id,"* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    list-style: none;\r\n    font-family: 'Montserrat';\r\n}\r\n\r\n:root {\r\n    --bcgBody: #B4E197;\r\n    --bcgBasket: #e3ebdb;\r\n    --bcgExcursionsList: #DDFFBC;\r\n    --removeButton: red;\r\n    --borderColor: #83BD75;\r\n    --bcgExcursionsItemButton: #83BD75;\r\n    --colorExcursionsItemButton: #fff;\r\n    --bcgBasketItemButton: #6fad66;\r\n    --colorBasketItemButton: #fff;\r\n}\r\n\r\nbody {\r\n    background-color: var(--bcgBody);\r\n}\r\n\r\n.summary__item--prototype, .excursions__item--prototype {\r\n    display: none;\r\n}\r\n\r\n/* excursions list */\r\n\r\n.offer__panel {\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n}\r\n\r\n.excursions__item {\r\n    padding: 10px;\r\n    margin-top: 20px;\r\n    background-color: var(--bcgExcursionsList);\r\n    border-radius: 15px;\r\n}\r\n\r\n.excursions__title, .excursions__description, .excursions__field {\r\n    margin-bottom: 10px;\r\n    text-align: center;\r\n}\r\n\r\n.excursions__description {\r\n    font-weight: 500;\r\n}\r\n\r\n.excursions__field-name {\r\n    font-weight: 400;\r\n}\r\n\r\n.excursions__field--input {\r\n    width: 30px;\r\n    text-align: center;\r\n    font-size: 1rem;\r\n    border: none;\r\n    border-bottom: 2px solid var(--borderColor);\r\n    outline: none;\r\n    background-color: transparent;\r\n}\r\n\r\n.excursions__field-input--submit {\r\n    font-size: 0.9rem;\r\n    padding: 5px 10px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgExcursionsItemButton);\r\n    color: var(--colorExcursionsItemButton);\r\n    transition: .2s;\r\n}\r\n\r\n.children-price, .adults-price {\r\n    font-weight: 500;\r\n}\r\n\r\n/* basket form */\r\n\r\n.panel__form {\r\n    background-color: var(--bcgBasket);\r\n    border-radius: 15px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-align: center;\r\n    margin-bottom: 15px;\r\n    padding: 10px;\r\n}\r\n\r\n.order__total-price {\r\n    font-weight: 500;\r\n    font-size: 1.1rem;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.order__field {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.order__field-input {\r\n    width: 50%;\r\n    padding: 5px 10px;\r\n    outline: none;\r\n    border: none;\r\n    background-color: transparent;\r\n    border-bottom: 1px solid green;\r\n}\r\n\r\n.order__field-submit {\r\n    font-size: 0.9rem;\r\n    margin-top: 15px;\r\n    width: 150px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgBasketItemButton);\r\n    color: var(--colorBasketItemButton);\r\n    transition: .2s;\r\n}\r\n\r\n\r\n/* basket */\r\n\r\n.panel__summary {\r\n    margin-top: 12px;\r\n}\r\n\r\n.summary__item {\r\n    padding: 10px;\r\n    border-top: 2px solid var(--borderColor); \r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.summary__title {\r\n    margin-bottom: 5px;\r\n}\r\n\r\n.summary__btn-remove {\r\n    text-decoration: none;\r\n    color: var(--removeButton);\r\n    margin-left: 5px;\r\n}\r\n\r\n@media (min-width: 1000px) {\r\n\r\n    body {\r\n        height: 100vh;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    .offer__panel {\r\n        flex-direction: row;\r\n        max-width: 1700px;\r\n        justify-content: center;\r\n        height: 80vh;\r\n        overflow: hidden;\r\n        background-color: #6fad66;\r\n        border-radius: 10px;\r\n    }\r\n    \r\n    .panel__excursions {\r\n        overflow-y: auto;\r\n        width: 70%;\r\n        margin-right: 20px;\r\n    }\r\n\r\n    .excursions__item {\r\n        margin-top: 0;\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    .panel__form {\r\n        width: 30%;\r\n        overflow-y: auto;\r\n        margin-bottom: 0;\r\n    }\r\n\r\n    .excursions__field-input--submit:hover, .order__field-submit:hover {\r\n        transform: scale(1.05);\r\n        cursor: pointer;\r\n        background-color: green;\r\n    } \r\n}","",{version:3,sources:["webpack://./src/css/client.css"],names:[],mappings:"AAEA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,gBAAgB;IAChB,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;IAClB,oBAAoB;IACpB,4BAA4B;IAC5B,mBAAmB;IACnB,sBAAsB;IACtB,kCAAkC;IAClC,iCAAiC;IACjC,8BAA8B;IAC9B,6BAA6B;AACjC;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,aAAa;AACjB;;AAEA,oBAAoB;;AAEpB;IACI,aAAa;IACb,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,0CAA0C;IAC1C,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,eAAe;IACf,YAAY;IACZ,2CAA2C;IAC3C,aAAa;IACb,6BAA6B;AACjC;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,gBAAgB;IAChB,YAAY;IACZ,mBAAmB;IACnB,gDAAgD;IAChD,uCAAuC;IACvC,eAAe;AACnB;;AAEA;IACI,gBAAgB;AACpB;;AAEA,gBAAgB;;AAEhB;IACI,kCAAkC;IAClC,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,iBAAiB;IACjB,aAAa;IACb,YAAY;IACZ,6BAA6B;IAC7B,8BAA8B;AAClC;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,YAAY;IACZ,gBAAgB;IAChB,YAAY;IACZ,mBAAmB;IACnB,4CAA4C;IAC5C,mCAAmC;IACnC,eAAe;AACnB;;;AAGA,WAAW;;AAEX;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,wCAAwC;IACxC,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,0BAA0B;IAC1B,gBAAgB;AACpB;;AAEA;;IAEI;QACI,aAAa;QACb,aAAa;QACb,uBAAuB;QACvB,mBAAmB;IACvB;;IAEA;QACI,mBAAmB;QACnB,iBAAiB;QACjB,uBAAuB;QACvB,YAAY;QACZ,gBAAgB;QAChB,yBAAyB;QACzB,mBAAmB;IACvB;;IAEA;QACI,gBAAgB;QAChB,UAAU;QACV,kBAAkB;IACtB;;IAEA;QACI,aAAa;QACb,mBAAmB;IACvB;;IAEA;QACI,UAAU;QACV,gBAAgB;QAChB,gBAAgB;IACpB;;IAEA;QACI,sBAAsB;QACtB,eAAe;QACf,uBAAuB;IAC3B;AACJ",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500&display=swap');\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    list-style: none;\r\n    font-family: 'Montserrat';\r\n}\r\n\r\n:root {\r\n    --bcgBody: #B4E197;\r\n    --bcgBasket: #e3ebdb;\r\n    --bcgExcursionsList: #DDFFBC;\r\n    --removeButton: red;\r\n    --borderColor: #83BD75;\r\n    --bcgExcursionsItemButton: #83BD75;\r\n    --colorExcursionsItemButton: #fff;\r\n    --bcgBasketItemButton: #6fad66;\r\n    --colorBasketItemButton: #fff;\r\n}\r\n\r\nbody {\r\n    background-color: var(--bcgBody);\r\n}\r\n\r\n.summary__item--prototype, .excursions__item--prototype {\r\n    display: none;\r\n}\r\n\r\n/* excursions list */\r\n\r\n.offer__panel {\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n}\r\n\r\n.excursions__item {\r\n    padding: 10px;\r\n    margin-top: 20px;\r\n    background-color: var(--bcgExcursionsList);\r\n    border-radius: 15px;\r\n}\r\n\r\n.excursions__title, .excursions__description, .excursions__field {\r\n    margin-bottom: 10px;\r\n    text-align: center;\r\n}\r\n\r\n.excursions__description {\r\n    font-weight: 500;\r\n}\r\n\r\n.excursions__field-name {\r\n    font-weight: 400;\r\n}\r\n\r\n.excursions__field--input {\r\n    width: 30px;\r\n    text-align: center;\r\n    font-size: 1rem;\r\n    border: none;\r\n    border-bottom: 2px solid var(--borderColor);\r\n    outline: none;\r\n    background-color: transparent;\r\n}\r\n\r\n.excursions__field-input--submit {\r\n    font-size: 0.9rem;\r\n    padding: 5px 10px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgExcursionsItemButton);\r\n    color: var(--colorExcursionsItemButton);\r\n    transition: .2s;\r\n}\r\n\r\n.children-price, .adults-price {\r\n    font-weight: 500;\r\n}\r\n\r\n/* basket form */\r\n\r\n.panel__form {\r\n    background-color: var(--bcgBasket);\r\n    border-radius: 15px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-align: center;\r\n    margin-bottom: 15px;\r\n    padding: 10px;\r\n}\r\n\r\n.order__total-price {\r\n    font-weight: 500;\r\n    font-size: 1.1rem;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.order__field {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.order__field-input {\r\n    width: 50%;\r\n    padding: 5px 10px;\r\n    outline: none;\r\n    border: none;\r\n    background-color: transparent;\r\n    border-bottom: 1px solid green;\r\n}\r\n\r\n.order__field-submit {\r\n    font-size: 0.9rem;\r\n    margin-top: 15px;\r\n    width: 150px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgBasketItemButton);\r\n    color: var(--colorBasketItemButton);\r\n    transition: .2s;\r\n}\r\n\r\n\r\n/* basket */\r\n\r\n.panel__summary {\r\n    margin-top: 12px;\r\n}\r\n\r\n.summary__item {\r\n    padding: 10px;\r\n    border-top: 2px solid var(--borderColor); \r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.summary__title {\r\n    margin-bottom: 5px;\r\n}\r\n\r\n.summary__btn-remove {\r\n    text-decoration: none;\r\n    color: var(--removeButton);\r\n    margin-left: 5px;\r\n}\r\n\r\n@media (min-width: 1000px) {\r\n\r\n    body {\r\n        height: 100vh;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    .offer__panel {\r\n        flex-direction: row;\r\n        max-width: 1700px;\r\n        justify-content: center;\r\n        height: 80vh;\r\n        overflow: hidden;\r\n        background-color: #6fad66;\r\n        border-radius: 10px;\r\n    }\r\n    \r\n    .panel__excursions {\r\n        overflow-y: auto;\r\n        width: 70%;\r\n        margin-right: 20px;\r\n    }\r\n\r\n    .excursions__item {\r\n        margin-top: 0;\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    .panel__form {\r\n        width: 30%;\r\n        overflow-y: auto;\r\n        margin-bottom: 0;\r\n    }\r\n\r\n    .excursions__field-input--submit:hover, .order__field-submit:hover {\r\n        transform: scale(1.05);\r\n        cursor: pointer;\r\n        background-color: green;\r\n    } \r\n}"],sourceRoot:""}]);const s=a},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var t="",n=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),n&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=r(e),n&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(r,t,n,o,i){"string"==typeof r&&(r=[[null,r,void 0]]);var a={};if(n)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<r.length;u++){var l=[].concat(r[u]);n&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:r=>{r.exports=function(r){var e=r[1],t=r[3];if(!t)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */"),a=t.sources.map((function(r){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(r," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:r=>{var e=[];function t(r){for(var t=-1,n=0;n<e.length;n++)if(e[n].identifier===r){t=n;break}return t}function n(r,n){for(var i={},a=[],s=0;s<r.length;s++){var c=r[s],u=n.base?c[0]+n.base:c[0],l=i[u]||0,d="".concat(u," ").concat(l);i[u]=l+1;var A=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var h=o(p,n);n.byIndex=s,e.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(r,e){var t=e.domAPI(e);return t.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;t.update(r=e)}else t.remove()}}r.exports=function(r,o){var i=n(r=r||[],o=o||{});return function(r){r=r||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var c=n(r,o),u=0;u<i.length;u++){var l=t(i[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=c}}},569:r=>{var e={};r.exports=function(r,t){var n=function(r){if(void 0===e[r]){var t=document.querySelector(r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(r){t=null}e[r]=t}return e[r]}(r);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}},216:r=>{r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},565:(r,e,t)=>{r.exports=function(r){var e=t.nc;e&&r.setAttribute("nonce",e)}},795:r=>{r.exports=function(r){var e=r.insertStyleElement(r);return{update:function(t){!function(r,e,t){var n="";t.supports&&(n+="@supports (".concat(t.supports,") {")),t.media&&(n+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(n+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),n+=t.css,o&&(n+="}"),t.media&&(n+="}"),t.supports&&(n+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,r,e.options)}(e,r,t)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},589:r=>{r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}}},e={};function t(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,exports:{}};return r[n](i,i.exports,t),i.exports}t.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return t.d(e,{a:e}),e},t.d=(r,e)=>{for(var n in e)t.o(e,n)&&!t.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:e[n]})},t.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),t.nc=void 0,(()=>{var r="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==r&&r,e="URLSearchParams"in r,t="Symbol"in r&&"iterator"in Symbol,n="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(r){return!1}}(),o="FormData"in r,i="ArrayBuffer"in r;if(i)var a=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],s=ArrayBuffer.isView||function(r){return r&&a.indexOf(Object.prototype.toString.call(r))>-1};function c(r){if("string"!=typeof r&&(r=String(r)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(r)||""===r)throw new TypeError('Invalid character in header field name: "'+r+'"');return r.toLowerCase()}function u(r){return"string"!=typeof r&&(r=String(r)),r}function l(r){var e={next:function(){var e=r.shift();return{done:void 0===e,value:e}}};return t&&(e[Symbol.iterator]=function(){return e}),e}function d(r){this.map={},r instanceof d?r.forEach((function(r,e){this.append(e,r)}),this):Array.isArray(r)?r.forEach((function(r){this.append(r[0],r[1])}),this):r&&Object.getOwnPropertyNames(r).forEach((function(e){this.append(e,r[e])}),this)}function A(r){if(r.bodyUsed)return Promise.reject(new TypeError("Already read"));r.bodyUsed=!0}function p(r){return new Promise((function(e,t){r.onload=function(){e(r.result)},r.onerror=function(){t(r.error)}}))}function h(r){var e=new FileReader,t=p(e);return e.readAsArrayBuffer(r),t}function f(r){if(r.slice)return r.slice(0);var e=new Uint8Array(r.byteLength);return e.set(new Uint8Array(r)),e.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(r){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=r,r?"string"==typeof r?this._bodyText=r:n&&Blob.prototype.isPrototypeOf(r)?this._bodyBlob=r:o&&FormData.prototype.isPrototypeOf(r)?this._bodyFormData=r:e&&URLSearchParams.prototype.isPrototypeOf(r)?this._bodyText=r.toString():i&&n&&(t=r)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=f(r.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(r)||s(r))?this._bodyArrayBuffer=f(r):this._bodyText=r=Object.prototype.toString.call(r):this._bodyText="",this.headers.get("content-type")||("string"==typeof r?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):e&&URLSearchParams.prototype.isPrototypeOf(r)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n&&(this.blob=function(){var r=A(this);if(r)return r;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?A(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(h)}),this.text=function(){var r,e,t,n=A(this);if(n)return n;if(this._bodyBlob)return r=this._bodyBlob,t=p(e=new FileReader),e.readAsText(r),t;if(this._bodyArrayBuffer)return Promise.resolve(function(r){for(var e=new Uint8Array(r),t=new Array(e.length),n=0;n<e.length;n++)t[n]=String.fromCharCode(e[n]);return t.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(B)}),this.json=function(){return this.text().then(JSON.parse)},this}d.prototype.append=function(r,e){r=c(r),e=u(e);var t=this.map[r];this.map[r]=t?t+", "+e:e},d.prototype.delete=function(r){delete this.map[c(r)]},d.prototype.get=function(r){return r=c(r),this.has(r)?this.map[r]:null},d.prototype.has=function(r){return this.map.hasOwnProperty(c(r))},d.prototype.set=function(r,e){this.map[c(r)]=u(e)},d.prototype.forEach=function(r,e){for(var t in this.map)this.map.hasOwnProperty(t)&&r.call(e,this.map[t],t,this)},d.prototype.keys=function(){var r=[];return this.forEach((function(e,t){r.push(t)})),l(r)},d.prototype.values=function(){var r=[];return this.forEach((function(e){r.push(e)})),l(r)},d.prototype.entries=function(){var r=[];return this.forEach((function(e,t){r.push([t,e])})),l(r)},t&&(d.prototype[Symbol.iterator]=d.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function b(r,e){if(!(this instanceof b))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var t,n,o=(e=e||{}).body;if(r instanceof b){if(r.bodyUsed)throw new TypeError("Already read");this.url=r.url,this.credentials=r.credentials,e.headers||(this.headers=new d(r.headers)),this.method=r.method,this.mode=r.mode,this.signal=r.signal,o||null==r._bodyInit||(o=r._bodyInit,r.bodyUsed=!0)}else this.url=String(r);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new d(e.headers)),this.method=(n=(t=e.method||this.method||"GET").toUpperCase(),y.indexOf(n)>-1?n:t),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var i=/([?&])_=[^&]*/;i.test(this.url)?this.url=this.url.replace(i,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function B(r){var e=new FormData;return r.trim().split("&").forEach((function(r){if(r){var t=r.split("="),n=t.shift().replace(/\+/g," "),o=t.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function g(r,e){if(!(this instanceof g))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new d(e.headers),this.url=e.url||"",this._initBody(r)}b.prototype.clone=function(){return new b(this,{body:this._bodyInit})},m.call(b.prototype),m.call(g.prototype),g.prototype.clone=function(){return new g(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new d(this.headers),url:this.url})},g.error=function(){var r=new g(null,{status:0,statusText:""});return r.type="error",r};var C=[301,302,303,307,308];g.redirect=function(r,e){if(-1===C.indexOf(e))throw new RangeError("Invalid status code");return new g(null,{status:e,headers:{location:r}})};var x=r.DOMException;try{new x}catch(r){(x=function(r,e){this.message=r,this.name=e;var t=Error(r);this.stack=t.stack}).prototype=Object.create(Error.prototype),x.prototype.constructor=x}function _(e,t){return new Promise((function(o,a){var s=new b(e,t);if(s.signal&&s.signal.aborted)return a(new x("Aborted","AbortError"));var c=new XMLHttpRequest;function l(){c.abort()}c.onload=function(){var r,e,t={status:c.status,statusText:c.statusText,headers:(r=c.getAllResponseHeaders()||"",e=new d,r.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(r){return 0===r.indexOf("\n")?r.substr(1,r.length):r})).forEach((function(r){var t=r.split(":"),n=t.shift().trim();if(n){var o=t.join(":").trim();e.append(n,o)}})),e)};t.url="responseURL"in c?c.responseURL:t.headers.get("X-Request-URL");var n="response"in c?c.response:c.responseText;setTimeout((function(){o(new g(n,t))}),0)},c.onerror=function(){setTimeout((function(){a(new TypeError("Network request failed"))}),0)},c.ontimeout=function(){setTimeout((function(){a(new TypeError("Network request failed"))}),0)},c.onabort=function(){setTimeout((function(){a(new x("Aborted","AbortError"))}),0)},c.open(s.method,function(e){try{return""===e&&r.location.href?r.location.href:e}catch(r){return e}}(s.url),!0),"include"===s.credentials?c.withCredentials=!0:"omit"===s.credentials&&(c.withCredentials=!1),"responseType"in c&&(n?c.responseType="blob":i&&s.headers.get("Content-Type")&&-1!==s.headers.get("Content-Type").indexOf("application/octet-stream")&&(c.responseType="arraybuffer")),!t||"object"!=typeof t.headers||t.headers instanceof d?s.headers.forEach((function(r,e){c.setRequestHeader(e,r)})):Object.getOwnPropertyNames(t.headers).forEach((function(r){c.setRequestHeader(r,u(t.headers[r]))})),s.signal&&(s.signal.addEventListener("abort",l),c.onreadystatechange=function(){4===c.readyState&&s.signal.removeEventListener("abort",l)}),c.send(void 0===s._bodyInit?null:s._bodyInit)}))}_.polyfill=!0,r.fetch||(r.fetch=_,r.Headers=d,r.Request=b,r.Response=g)})(),(()=>{var r=t(379),e=t.n(r),n=t(795),o=t.n(n),i=t(569),a=t.n(i),s=t(565),c=t.n(s),u=t(216),l=t.n(u),d=t(589),A=t.n(d),p=t(392),h={};h.styleTagTransform=A(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=l(),e()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;const f=new class{loadData(r){return fetch(r).then((r=>r.ok?r.json():Promise.reject(r)))}addData(r,e){const t={method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json"}};return fetch(e,t).then((r=>console.log(r))).catch((r=>console.error(r)))}removeData(r,e){return fetch(`${r}/${e}`,{method:"DELETE"}).then((r=>console.log(r))).catch((r=>console.error(r)))}updateData(r,e,t){const n={method:"PUT",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}};return fetch(`${r}/${e}`,n).then((r=>console.log(r))).catch((r=>console.log(r)))}};document.addEventListener("DOMContentLoaded",(function(){console.log("client"),f.loadData(m).then((r=>{!function(r){const e=document.querySelector(".panel__excursions");r.forEach((r=>{const t=e.querySelector(".excursions__item--prototype").cloneNode(!0);t.classList.remove("excursions__item--prototype");const n=t.querySelector(".excursions__title"),o=t.querySelector(".excursions__description"),i=t.querySelector(".adults-price"),a=t.querySelector(".children-price");t.dataset.id=r.id,n.textContent=r.title,o.textContent=r.description,i.textContent=r.adultPrice,a.textContent=r.childrenPrice,e.appendChild(t),document.querySelector(".panel__excursions").addEventListener("submit",g)}))}(r)})).catch((r=>console.log(r)))}));const m="https://fake-database-server.herokuapp.com/excursions",y=document.querySelector(".order__total-price-value"),b=[],B=[];function g(r){r.preventDefault();const e=r.target.parentElement,t=e.querySelector(".excursions__title").textContent,n=e.querySelector('input[name="adults"]'),o=e.querySelector(".adults-price").textContent,i=e.querySelector('input[name="children"]'),a=e.querySelector(".children-price").textContent,s=new class{constructor(r,e,t,n,o){this.title=r,this.adultNumber=e,this.adultPrice=t,this.childNumber=n,this.childPrice=o}addTrip(r,e,t){r.textContent=this.title;const n=this.adultNumber*this.adultPrice+this.childNumber*this.childPrice;e.textContent=`${n}PLN`,""===this.childNumber?t.textContent=`dorośli: ${this.adultNumber} x ${this.adultPrice}PLN`:""===this.adultNumber?t.textContent=`dzieci: ${this.childNumber} x ${this.childPrice}PLN`:t.textContent=`dorośli: ${this.adultNumber} x ${this.adultPrice}PLN, dzieci: ${this.childNumber} x ${this.childPrice}PLN`}}(t,n.value,o,i.value,a),c=document.querySelector(".panel__summary"),u=c.firstElementChild.cloneNode(!0);u.classList.remove("summary__item--prototype");const l=u.querySelector(".summary__name"),d=l.nextElementSibling,A=u.querySelector(".summary__prices");var p;""===n.value&&""===i.value?alert("Wprowadź wartości!"):isNaN(Number(n.value))||isNaN(Number(i.value))||-1===Math.sign(n.value)||-1===Math.sign(i.value)?alert("Wprowadź poprawne wartości!"):(c.appendChild(u),B.push(s),s.addTrip(l,d,A),b.push(parseInt(d.textContent)),y.textContent=`${x(b)}PLN`),p=i,n.value="",p.value="",document.querySelector(".panel__summary").addEventListener("click",C)}function C(r){r.preventDefault();const e=r.target;if("A"===e.tagName){const r=e.parentElement;r.parentElement.remove();const t=r.querySelector(".summary__name").textContent,n=B.map((r=>r.title)),o=n.indexOf(t);-1!==o&&(B.splice(o,1),n.splice(o,1));const i=parseInt(r.querySelector(".summary__total-price").textContent),a=b.indexOf(i);-1!==a&&b.splice(a,1),y.textContent=`${x(b)}PLN`,console.log(B)}}function x(r){let e=0;for(let t=0;t<r.length;t++)e+=r[t];return e}function _(r,e,t,n){r?t.push(e):n.push(e)}document.querySelector(".order__field-submit").addEventListener("click",(function(r){r.preventDefault();const e=document.querySelector(".panel__order"),t=e.querySelector("input[name=name]"),n=e.querySelector("input[name=email"),o=[],i=[];o.length=0,i.length=0,_(""===t.value||!isNaN(Number(t.value)),t,o,i),_(!n.value.includes("@"),n,o,i),0===B.length?alert("Najpierw wybierz wycieczkę!"):o.length>0?o.forEach((r=>{r.style.background="#FF1700"})):(alert(`Dziękujemy za złożenie zamówienia o wartości ${y.textContent}. Szczegóły zamówienia zostały wysłane na adres e-mail: ${n.value}`),function(r,e,t){r.forEach((r=>{const n={name:e,email:t,title:r.title,adultNumber:r.adultNumber,adultPrice:r.adultPrice,childrenNumber:r.childNumber,childrenPrice:r.childPrice};f.addData(n,"https://fake-database-server.herokuapp.com/orders")}))}(B,t.value,n.value),console.log(B),function(r,e,t,n,o){r.length=0,e.value="",t.value="",n.length=0,o.textContent="0PLN",document.querySelectorAll(".summary__item").forEach((r=>{r.classList.contains("summary__item--prototype")||r.remove()}))}(B,t,n,b,y)),i.forEach((r=>{r.style.background="transparent"}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
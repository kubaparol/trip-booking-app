(()=>{"use strict";var r={27:(r,e,n)=>{n.d(e,{Z:()=>a});var t=n(537),o=n.n(t),i=n(645),s=n.n(i)()(o());s.push([r.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500&display=swap);"]),s.push([r.id,"* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Montserrat';\r\n    list-style: none;\r\n}\r\n\r\n:root {\r\n    --bcgBody: #B4E197;\r\n    --bcgFormButton: #83BD75;\r\n    --colorFormButton: #fff;\r\n    --bcgForm: #e3ebdb;\r\n    --bcgExcursionsItemButtonUpdate: #83BD75;\r\n    --bcgExcursionsItemButtonRemove: #e74c3c;\r\n    --colorExcursionsItemButton: #fff;\r\n    --bcgExcursionsList: #DDFFBC;\r\n}\r\n\r\nbody {\r\n    background-color: var(--bcgBody);\r\n}\r\n\r\nh1 {\r\n    background-color: #52734D;\r\n    color: #fff;\r\n    padding: 10px;\r\n}\r\n\r\n.panel {\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n}\r\n\r\n/* form */\r\n\r\n.form {\r\n    font-weight: 500;\r\n    background-color: var(--bcgForm);\r\n    padding-top: 12px;\r\n}\r\n\r\n.form__label {\r\n    margin-left: 5px;\r\n}\r\n\r\n.form__field, .order__form__field {\r\n    width: 100%;\r\n    resize: vertical;\r\n    height: 25px;\r\n    font-size: 1rem;\r\n    background-color: transparent;\r\n    outline: none;\r\n    border: none;\r\n    border-bottom: 1px solid green;\r\n    padding: 10px;\r\n}\r\n\r\n.form__field {\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.order__field-submit {\r\n    font-size: 1rem;\r\n    padding: 5px 40px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgFormButton);\r\n    color: var(--colorFormButton);\r\n    transition: .2s;\r\n    margin: 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n/* list */\r\n\r\n.panel__excursions {\r\n    padding: 10px;\r\n}\r\n\r\n.excursions__item {\r\n    padding: 10px;\r\n    margin-top: 20px;\r\n    background-color: var(--bcgExcursionsList);\r\n    border-radius: 15px;\r\n}\r\n\r\n.excursions__title, .excursions__description, .excursions__field {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.excursions__description {\r\n    font-weight: 500;\r\n}\r\n\r\n.excursions__field-input--update, .excursions__field-input--remove {\r\n    font-size: 0.9rem;\r\n    padding: 5px 10px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgExcursionsItemButtonUpdate);\r\n    color: var(--colorExcursionsItemButton);\r\n    transition: .2s;\r\n    cursor: pointer;\r\n}\r\n\r\n.excursions__field-input--update:hover, .order__field-submit:hover {\r\n    transform: scale(1.05);\r\n    cursor: pointer;\r\n    background-color: green;\r\n}\r\n\r\n.excursions__field-input--remove:hover {\r\n    transform: scale(1.05);\r\n    cursor: pointer;\r\n    background-color: #c0392b;\r\n}\r\n\r\n.excursions__field-input--remove {\r\n    background-color: var(--bcgExcursionsItemButtonRemove);\r\n}\r\n\r\n.excursions__field {\r\n    margin-top: 10px;\r\n}\r\n\r\n\r\n.excursions__item--prototype {\r\n    display: none;\r\n}\r\n\r\n.is-editable{\r\n    border: 3px solid black;\r\n}\r\n\r\n.is-editable  .excursions__title, .is-editable .excursions__description, .is-editable .adults-price, .is-editable .children-price {\r\n    color: #b71540;\r\n}\r\n","",{version:3,sources:["webpack://./src/css/admin.css"],names:[],mappings:"AAEA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,wBAAwB;IACxB,uBAAuB;IACvB,kBAAkB;IAClB,wCAAwC;IACxC,wCAAwC;IACxC,iCAAiC;IACjC,4BAA4B;AAChC;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,yBAAyB;IACzB,WAAW;IACX,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA,SAAS;;AAET;IACI,gBAAgB;IAChB,gCAAgC;IAChC,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,gBAAgB;IAChB,YAAY;IACZ,eAAe;IACf,6BAA6B;IAC7B,aAAa;IACb,YAAY;IACZ,8BAA8B;IAC9B,aAAa;AACjB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,gBAAgB;IAChB,YAAY;IACZ,mBAAmB;IACnB,sCAAsC;IACtC,6BAA6B;IAC7B,eAAe;IACf,YAAY;IACZ,eAAe;AACnB;;AAEA,SAAS;;AAET;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,0CAA0C;IAC1C,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,gBAAgB;IAChB,YAAY;IACZ,mBAAmB;IACnB,sDAAsD;IACtD,uCAAuC;IACvC,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,uBAAuB;AAC3B;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,sDAAsD;AAC1D;;AAEA;IACI,gBAAgB;AACpB;;;AAGA;IACI,aAAa;AACjB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,cAAc;AAClB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500&display=swap');\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Montserrat';\r\n    list-style: none;\r\n}\r\n\r\n:root {\r\n    --bcgBody: #B4E197;\r\n    --bcgFormButton: #83BD75;\r\n    --colorFormButton: #fff;\r\n    --bcgForm: #e3ebdb;\r\n    --bcgExcursionsItemButtonUpdate: #83BD75;\r\n    --bcgExcursionsItemButtonRemove: #e74c3c;\r\n    --colorExcursionsItemButton: #fff;\r\n    --bcgExcursionsList: #DDFFBC;\r\n}\r\n\r\nbody {\r\n    background-color: var(--bcgBody);\r\n}\r\n\r\nh1 {\r\n    background-color: #52734D;\r\n    color: #fff;\r\n    padding: 10px;\r\n}\r\n\r\n.panel {\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n}\r\n\r\n/* form */\r\n\r\n.form {\r\n    font-weight: 500;\r\n    background-color: var(--bcgForm);\r\n    padding-top: 12px;\r\n}\r\n\r\n.form__label {\r\n    margin-left: 5px;\r\n}\r\n\r\n.form__field, .order__form__field {\r\n    width: 100%;\r\n    resize: vertical;\r\n    height: 25px;\r\n    font-size: 1rem;\r\n    background-color: transparent;\r\n    outline: none;\r\n    border: none;\r\n    border-bottom: 1px solid green;\r\n    padding: 10px;\r\n}\r\n\r\n.form__field {\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.order__field-submit {\r\n    font-size: 1rem;\r\n    padding: 5px 40px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgFormButton);\r\n    color: var(--colorFormButton);\r\n    transition: .2s;\r\n    margin: 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n/* list */\r\n\r\n.panel__excursions {\r\n    padding: 10px;\r\n}\r\n\r\n.excursions__item {\r\n    padding: 10px;\r\n    margin-top: 20px;\r\n    background-color: var(--bcgExcursionsList);\r\n    border-radius: 15px;\r\n}\r\n\r\n.excursions__title, .excursions__description, .excursions__field {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.excursions__description {\r\n    font-weight: 500;\r\n}\r\n\r\n.excursions__field-input--update, .excursions__field-input--remove {\r\n    font-size: 0.9rem;\r\n    padding: 5px 10px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgExcursionsItemButtonUpdate);\r\n    color: var(--colorExcursionsItemButton);\r\n    transition: .2s;\r\n    cursor: pointer;\r\n}\r\n\r\n.excursions__field-input--update:hover, .order__field-submit:hover {\r\n    transform: scale(1.05);\r\n    cursor: pointer;\r\n    background-color: green;\r\n}\r\n\r\n.excursions__field-input--remove:hover {\r\n    transform: scale(1.05);\r\n    cursor: pointer;\r\n    background-color: #c0392b;\r\n}\r\n\r\n.excursions__field-input--remove {\r\n    background-color: var(--bcgExcursionsItemButtonRemove);\r\n}\r\n\r\n.excursions__field {\r\n    margin-top: 10px;\r\n}\r\n\r\n\r\n.excursions__item--prototype {\r\n    display: none;\r\n}\r\n\r\n.is-editable{\r\n    border: 3px solid black;\r\n}\r\n\r\n.is-editable  .excursions__title, .is-editable .excursions__description, .is-editable .adults-price, .is-editable .children-price {\r\n    color: #b71540;\r\n}\r\n"],sourceRoot:""}]);const a=s},177:(r,e,n)=>{n.d(e,{Z:()=>a});var t=n(537),o=n.n(t),i=n(645),s=n.n(i)()(o());s.push([r.id,".excursions__loader {\r\n    display: none;\r\n    transform: translateZ(1px);\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n  .excursions__loader > div {\r\n    display: inline-block;\r\n    width: 64px;\r\n    height: 64px;\r\n    margin: 8px;\r\n    border-radius: 50%;\r\n    background: rgb(255, 251, 0);\r\n    animation: excursions__loader 3.4s cubic-bezier(0, 0.2, 0.8, 1) infinite;\r\n  }\r\n  @keyframes excursions__loader {\r\n    0%, 100% {\r\n      animation-timing-function: cubic-bezier(0.5, 0, 1, 0.5);\r\n    }\r\n    0% {\r\n      transform: rotateY(0deg);\r\n    }\r\n    50% {\r\n      transform: rotateY(1800deg);\r\n      animation-timing-function: cubic-bezier(0, 0.5, 0.5, 1);\r\n    }\r\n    100% {\r\n      transform: rotateY(3600deg);\r\n    }\r\n  }","",{version:3,sources:["webpack://./src/css/loader.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,0BAA0B;IAC1B,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,gCAAgC;EAClC;EACA;IACE,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,4BAA4B;IAC5B,wEAAwE;EAC1E;EACA;IACE;MACE,uDAAuD;IACzD;IACA;MACE,wBAAwB;IAC1B;IACA;MACE,2BAA2B;MAC3B,uDAAuD;IACzD;IACA;MACE,2BAA2B;IAC7B;EACF",sourcesContent:[".excursions__loader {\r\n    display: none;\r\n    transform: translateZ(1px);\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n  .excursions__loader > div {\r\n    display: inline-block;\r\n    width: 64px;\r\n    height: 64px;\r\n    margin: 8px;\r\n    border-radius: 50%;\r\n    background: rgb(255, 251, 0);\r\n    animation: excursions__loader 3.4s cubic-bezier(0, 0.2, 0.8, 1) infinite;\r\n  }\r\n  @keyframes excursions__loader {\r\n    0%, 100% {\r\n      animation-timing-function: cubic-bezier(0.5, 0, 1, 0.5);\r\n    }\r\n    0% {\r\n      transform: rotateY(0deg);\r\n    }\r\n    50% {\r\n      transform: rotateY(1800deg);\r\n      animation-timing-function: cubic-bezier(0, 0.5, 0.5, 1);\r\n    }\r\n    100% {\r\n      transform: rotateY(3600deg);\r\n    }\r\n  }"],sourceRoot:""}]);const a=s},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var n="",t=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),t&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=r(e),t&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(r,n,t,o,i){"string"==typeof r&&(r=[[null,r,void 0]]);var s={};if(t)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var u=0;u<r.length;u++){var d=[].concat(r[u]);t&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:r=>{r.exports=function(r){var e=r[1],n=r[3];if(!n)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),s=n.sources.map((function(r){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(r," */")}));return[e].concat(s).concat([i]).join("\n")}return[e].join("\n")}},379:r=>{var e=[];function n(r){for(var n=-1,t=0;t<e.length;t++)if(e[t].identifier===r){n=t;break}return n}function t(r,t){for(var i={},s=[],a=0;a<r.length;a++){var c=r[a],u=t.base?c[0]+t.base:c[0],d=i[u]||0,l="".concat(u," ").concat(d);i[u]=d+1;var A=n(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var f=o(p,t);t.byIndex=a,e.splice(a,0,{identifier:l,updater:f,references:1})}s.push(l)}return s}function o(r,e){var n=e.domAPI(e);return n.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;n.update(r=e)}else n.remove()}}r.exports=function(r,o){var i=t(r=r||[],o=o||{});return function(r){r=r||[];for(var s=0;s<i.length;s++){var a=n(i[s]);e[a].references--}for(var c=t(r,o),u=0;u<i.length;u++){var d=n(i[u]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=c}}},569:r=>{var e={};r.exports=function(r,n){var t=function(r){if(void 0===e[r]){var n=document.querySelector(r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}e[r]=n}return e[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},216:r=>{r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},565:(r,e,n)=>{r.exports=function(r){var e=n.nc;e&&r.setAttribute("nonce",e)}},795:r=>{r.exports=function(r){var e=r.insertStyleElement(r);return{update:function(n){!function(r,e,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,o&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(t,r,e.options)}(e,r,n)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},589:r=>{r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}}},e={};function n(t){var o=e[t];if(void 0!==o)return o.exports;var i=e[t]={id:t,exports:{}};return r[t](i,i.exports,n),i.exports}n.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return n.d(e,{a:e}),e},n.d=(r,e)=>{for(var t in e)n.o(e,t)&&!n.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},n.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),n.nc=void 0,(()=>{var r="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==r&&r,e="URLSearchParams"in r,n="Symbol"in r&&"iterator"in Symbol,t="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(r){return!1}}(),o="FormData"in r,i="ArrayBuffer"in r;if(i)var s=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],a=ArrayBuffer.isView||function(r){return r&&s.indexOf(Object.prototype.toString.call(r))>-1};function c(r){if("string"!=typeof r&&(r=String(r)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(r)||""===r)throw new TypeError('Invalid character in header field name: "'+r+'"');return r.toLowerCase()}function u(r){return"string"!=typeof r&&(r=String(r)),r}function d(r){var e={next:function(){var e=r.shift();return{done:void 0===e,value:e}}};return n&&(e[Symbol.iterator]=function(){return e}),e}function l(r){this.map={},r instanceof l?r.forEach((function(r,e){this.append(e,r)}),this):Array.isArray(r)?r.forEach((function(r){this.append(r[0],r[1])}),this):r&&Object.getOwnPropertyNames(r).forEach((function(e){this.append(e,r[e])}),this)}function A(r){if(r.bodyUsed)return Promise.reject(new TypeError("Already read"));r.bodyUsed=!0}function p(r){return new Promise((function(e,n){r.onload=function(){e(r.result)},r.onerror=function(){n(r.error)}}))}function f(r){var e=new FileReader,n=p(e);return e.readAsArrayBuffer(r),n}function h(r){if(r.slice)return r.slice(0);var e=new Uint8Array(r.byteLength);return e.set(new Uint8Array(r)),e.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(r){var n;this.bodyUsed=this.bodyUsed,this._bodyInit=r,r?"string"==typeof r?this._bodyText=r:t&&Blob.prototype.isPrototypeOf(r)?this._bodyBlob=r:o&&FormData.prototype.isPrototypeOf(r)?this._bodyFormData=r:e&&URLSearchParams.prototype.isPrototypeOf(r)?this._bodyText=r.toString():i&&t&&(n=r)&&DataView.prototype.isPrototypeOf(n)?(this._bodyArrayBuffer=h(r.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(r)||a(r))?this._bodyArrayBuffer=h(r):this._bodyText=r=Object.prototype.toString.call(r):this._bodyText="",this.headers.get("content-type")||("string"==typeof r?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):e&&URLSearchParams.prototype.isPrototypeOf(r)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},t&&(this.blob=function(){var r=A(this);if(r)return r;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?A(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(f)}),this.text=function(){var r,e,n,t=A(this);if(t)return t;if(this._bodyBlob)return r=this._bodyBlob,n=p(e=new FileReader),e.readAsText(r),n;if(this._bodyArrayBuffer)return Promise.resolve(function(r){for(var e=new Uint8Array(r),n=new Array(e.length),t=0;t<e.length;t++)n[t]=String.fromCharCode(e[t]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}l.prototype.append=function(r,e){r=c(r),e=u(e);var n=this.map[r];this.map[r]=n?n+", "+e:e},l.prototype.delete=function(r){delete this.map[c(r)]},l.prototype.get=function(r){return r=c(r),this.has(r)?this.map[r]:null},l.prototype.has=function(r){return this.map.hasOwnProperty(c(r))},l.prototype.set=function(r,e){this.map[c(r)]=u(e)},l.prototype.forEach=function(r,e){for(var n in this.map)this.map.hasOwnProperty(n)&&r.call(e,this.map[n],n,this)},l.prototype.keys=function(){var r=[];return this.forEach((function(e,n){r.push(n)})),d(r)},l.prototype.values=function(){var r=[];return this.forEach((function(e){r.push(e)})),d(r)},l.prototype.entries=function(){var r=[];return this.forEach((function(e,n){r.push([n,e])})),d(r)},n&&(l.prototype[Symbol.iterator]=l.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function y(r,e){if(!(this instanceof y))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var n,t,o=(e=e||{}).body;if(r instanceof y){if(r.bodyUsed)throw new TypeError("Already read");this.url=r.url,this.credentials=r.credentials,e.headers||(this.headers=new l(r.headers)),this.method=r.method,this.mode=r.mode,this.signal=r.signal,o||null==r._bodyInit||(o=r._bodyInit,r.bodyUsed=!0)}else this.url=String(r);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new l(e.headers)),this.method=(t=(n=e.method||this.method||"GET").toUpperCase(),b.indexOf(t)>-1?t:n),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var i=/([?&])_=[^&]*/;i.test(this.url)?this.url=this.url.replace(i,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function g(r){var e=new FormData;return r.trim().split("&").forEach((function(r){if(r){var n=r.split("="),t=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(t),decodeURIComponent(o))}})),e}function B(r,e){if(!(this instanceof B))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new l(e.headers),this.url=e.url||"",this._initBody(r)}y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},m.call(y.prototype),m.call(B.prototype),B.prototype.clone=function(){return new B(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new l(this.headers),url:this.url})},B.error=function(){var r=new B(null,{status:0,statusText:""});return r.type="error",r};var C=[301,302,303,307,308];B.redirect=function(r,e){if(-1===C.indexOf(e))throw new RangeError("Invalid status code");return new B(null,{status:e,headers:{location:r}})};var x=r.DOMException;try{new x}catch(r){(x=function(r,e){this.message=r,this.name=e;var n=Error(r);this.stack=n.stack}).prototype=Object.create(Error.prototype),x.prototype.constructor=x}function v(e,n){return new Promise((function(o,s){var a=new y(e,n);if(a.signal&&a.signal.aborted)return s(new x("Aborted","AbortError"));var c=new XMLHttpRequest;function d(){c.abort()}c.onload=function(){var r,e,n={status:c.status,statusText:c.statusText,headers:(r=c.getAllResponseHeaders()||"",e=new l,r.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(r){return 0===r.indexOf("\n")?r.substr(1,r.length):r})).forEach((function(r){var n=r.split(":"),t=n.shift().trim();if(t){var o=n.join(":").trim();e.append(t,o)}})),e)};n.url="responseURL"in c?c.responseURL:n.headers.get("X-Request-URL");var t="response"in c?c.response:c.responseText;setTimeout((function(){o(new B(t,n))}),0)},c.onerror=function(){setTimeout((function(){s(new TypeError("Network request failed"))}),0)},c.ontimeout=function(){setTimeout((function(){s(new TypeError("Network request failed"))}),0)},c.onabort=function(){setTimeout((function(){s(new x("Aborted","AbortError"))}),0)},c.open(a.method,function(e){try{return""===e&&r.location.href?r.location.href:e}catch(r){return e}}(a.url),!0),"include"===a.credentials?c.withCredentials=!0:"omit"===a.credentials&&(c.withCredentials=!1),"responseType"in c&&(t?c.responseType="blob":i&&a.headers.get("Content-Type")&&-1!==a.headers.get("Content-Type").indexOf("application/octet-stream")&&(c.responseType="arraybuffer")),!n||"object"!=typeof n.headers||n.headers instanceof l?a.headers.forEach((function(r,e){c.setRequestHeader(e,r)})):Object.getOwnPropertyNames(n.headers).forEach((function(r){c.setRequestHeader(r,u(n.headers[r]))})),a.signal&&(a.signal.addEventListener("abort",d),c.onreadystatechange=function(){4===c.readyState&&a.signal.removeEventListener("abort",d)}),c.send(void 0===a._bodyInit?null:a._bodyInit)}))}v.polyfill=!0,r.fetch||(r.fetch=v,r.Headers=l,r.Request=y,r.Response=B)})(),(()=>{var r=n(379),e=n.n(r),t=n(795),o=n.n(t),i=n(569),s=n.n(i),a=n(565),c=n.n(a),u=n(216),d=n.n(u),l=n(589),A=n.n(l),p=n(27),f={};f.styleTagTransform=A(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=d(),e()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;var h=n(177),m={};m.styleTagTransform=A(),m.setAttributes=c(),m.insert=s().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),e()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;const b=new class{loadData(r){return fetch(r).then((r=>r.ok?r.json():Promise.reject(r)))}addData(r,e){const n={method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json"}};return fetch(e,n).then((r=>console.log(r))).catch((r=>console.error(r)))}removeData(r,e){return fetch(`${r}/${e}`,{method:"DELETE"}).then((r=>console.log(r))).catch((r=>console.error(r)))}updateData(r,e,n){const t={method:"PUT",body:JSON.stringify(n),headers:{"Content-Type":"application/json"}};return fetch(`${r}/${e}`,t).then((r=>console.log(r))).catch((r=>console.log(r)))}};document.addEventListener("DOMContentLoaded",(function(){console.log("client"),g(),document.querySelector(".panel__excursions").addEventListener("click",(r=>{r.preventDefault();const e=r.target;if(e.classList.contains("excursions__field-input--remove")&&!0===confirm("Czy na pewno chcesz usunąć wycieczkę?")){const r=e.parentElement.parentElement.parentElement.dataset.id;b.removeData(y,r).finally(g)}})),document.querySelector(".form").addEventListener("submit",(r=>{r.preventDefault();const{title:e,description:n,adultPrice:t,childrenPrice:o}=r.target,i={title:e.value,description:n.value,adultPrice:t.value,childrenPrice:o.value},s=[];!function(r,e){for(const n in e)""===e[n]&&r.push("error")}(s,i),s.length>0?alert("Uzupełnij wszystkie dane!"):(b.addData(i,y).finally(g),function(r,e,n,t){r.value="",e.value="",n.value="",t.value=""}(e,n,t,o))})),document.querySelector(".excursions").addEventListener("click",(r=>{const e=r.target,n=e.parentElement.parentElement.parentElement,t=n.querySelector(".excursions__field-input--update");if(e===t){console.log(t),r.preventDefault();const e=n.querySelectorAll("span");[...e].every((r=>r.isContentEditable))?function(r,e,n){const t=n.dataset.id,[o,i,s,a]=e,c={title:o.innerText,description:i.innerText,adultPrice:s.innerText,childrenPrice:a.innerText};b.updateData(y,t,c).finally((()=>{isNaN(Number(s.innerText))||isNaN(Number(a.innerText))?alert("Wprowadź poprawne wartości!"):(r.value="edytuj",e.forEach((r=>r.contentEditable=!1)),n.classList.remove("is-editable"))}))}(t,e,n):function(r,e,n){r.value="zapisz",e.forEach((r=>r.contentEditable=!0)),n.classList.add("is-editable")}(t,e,n)}}))}));const y="https://fake-database-server.herokuapp.com/excursions";function g(){const r=document.querySelector(".excursions__loader");!function(r){r.style.display="block",document.body.style.pointerEvents="none",document.body.style.opacity="0.4"}(r),b.loadData(y).then((e=>{!function(r){r.style.display="none",document.body.style.pointerEvents="auto",document.body.style.opacity="1"}(r),function(r){const e=document.querySelector(".panel__excursions");document.querySelectorAll(".excursions__item").forEach((r=>{r.classList.contains("excursions__item--prototype")||r.remove()}));const n=document.querySelector(".excursions__item--prototype");r.forEach((r=>{const t=n.cloneNode(!0);t.classList.remove("excursions__item--prototype");const o=t.querySelector(".excursions__title"),i=t.querySelector(".excursions__description"),s=t.querySelector(".adults-price"),a=t.querySelector(".children-price");!function(r,e,n,t,o,i){r.dataset.id=i.id,e.textContent=i.title,n.textContent=i.description,t.textContent=i.adultPrice,o.textContent=i.childrenPrice}(t,o,i,s,a,r),e.appendChild(t)}))}(e)})).catch((r=>console.log(r)))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
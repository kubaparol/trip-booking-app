(()=>{"use strict";var r={27:(r,e,t)=>{t.d(e,{Z:()=>a});var n=t(537),o=t.n(n),i=t(645),s=t.n(i)()(o());s.push([r.id,"@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500&display=swap);"]),s.push([r.id,"* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Montserrat';\r\n    list-style: none;\r\n}\r\n\r\n:root {\r\n    --bcgBody: #B4E197;\r\n    --bcgFormButton: #83BD75;\r\n    --colorFormButton: #fff;\r\n    --bcgForm: #e3ebdb;\r\n    --bcgExcursionsItemButtonUpdate: #83BD75;\r\n    --bcgExcursionsItemButtonRemove: #e74c3c;\r\n    --colorExcursionsItemButton: #fff;\r\n    --bcgExcursionsList: #DDFFBC;\r\n}\r\n\r\nbody {\r\n    background-color: var(--bcgBody);\r\n}\r\n\r\nh1 {\r\n    background-color: #52734D;\r\n    color: #fff;\r\n    padding: 10px;\r\n}\r\n\r\n.panel {\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n}\r\n\r\n/* form */\r\n\r\n.form {\r\n    font-weight: 500;\r\n    background-color: var(--bcgForm);\r\n    padding-top: 12px;\r\n}\r\n\r\n.form__label {\r\n    margin-left: 5px;\r\n}\r\n\r\n.form__field, .order__form__field {\r\n    width: 100%;\r\n    resize: vertical;\r\n    height: 25px;\r\n    font-size: 1rem;\r\n    background-color: transparent;\r\n    outline: none;\r\n    border: none;\r\n    border-bottom: 1px solid green;\r\n    padding: 10px;\r\n}\r\n\r\n.form__field {\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.order__field-submit {\r\n    font-size: 1rem;\r\n    padding: 5px 40px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgFormButton);\r\n    color: var(--colorFormButton);\r\n    transition: .2s;\r\n    margin: 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n/* list */\r\n\r\n.panel__excursions {\r\n    padding: 10px;\r\n}\r\n\r\n.excursions__item {\r\n    padding: 10px;\r\n    margin-top: 20px;\r\n    background-color: var(--bcgExcursionsList);\r\n    border-radius: 15px;\r\n}\r\n\r\n.excursions__title, .excursions__description, .excursions__field {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.excursions__description {\r\n    font-weight: 500;\r\n}\r\n\r\n.excursions__field-input--update, .excursions__field-input--remove {\r\n    font-size: 0.9rem;\r\n    padding: 5px 10px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgExcursionsItemButtonUpdate);\r\n    color: var(--colorExcursionsItemButton);\r\n    transition: .2s;\r\n    cursor: pointer;\r\n}\r\n\r\n.excursions__field-input--update:hover, .order__field-submit:hover {\r\n    transform: scale(1.05);\r\n    cursor: pointer;\r\n    background-color: green;\r\n}\r\n\r\n.excursions__field-input--remove:hover {\r\n    transform: scale(1.05);\r\n    cursor: pointer;\r\n    background-color: #c0392b;\r\n}\r\n\r\n.excursions__field-input--remove {\r\n    background-color: var(--bcgExcursionsItemButtonRemove);\r\n}\r\n\r\n.excursions__field {\r\n    margin-top: 10px;\r\n}\r\n\r\n\r\n.excursions__item--prototype {\r\n    display: none;\r\n}\r\n\r\n.is-editable{\r\n    border: 3px solid black;\r\n}\r\n\r\n.is-editable  .excursions__title, .is-editable .excursions__description, .is-editable .adults-price, .is-editable .children-price {\r\n    color: #b71540;\r\n}\r\n","",{version:3,sources:["webpack://./src/css/admin.css"],names:[],mappings:"AAEA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,wBAAwB;IACxB,uBAAuB;IACvB,kBAAkB;IAClB,wCAAwC;IACxC,wCAAwC;IACxC,iCAAiC;IACjC,4BAA4B;AAChC;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,yBAAyB;IACzB,WAAW;IACX,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA,SAAS;;AAET;IACI,gBAAgB;IAChB,gCAAgC;IAChC,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,gBAAgB;IAChB,YAAY;IACZ,eAAe;IACf,6BAA6B;IAC7B,aAAa;IACb,YAAY;IACZ,8BAA8B;IAC9B,aAAa;AACjB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,gBAAgB;IAChB,YAAY;IACZ,mBAAmB;IACnB,sCAAsC;IACtC,6BAA6B;IAC7B,eAAe;IACf,YAAY;IACZ,eAAe;AACnB;;AAEA,SAAS;;AAET;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,0CAA0C;IAC1C,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,gBAAgB;IAChB,YAAY;IACZ,mBAAmB;IACnB,sDAAsD;IACtD,uCAAuC;IACvC,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,uBAAuB;AAC3B;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,sDAAsD;AAC1D;;AAEA;IACI,gBAAgB;AACpB;;;AAGA;IACI,aAAa;AACjB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,cAAc;AAClB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500&display=swap');\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Montserrat';\r\n    list-style: none;\r\n}\r\n\r\n:root {\r\n    --bcgBody: #B4E197;\r\n    --bcgFormButton: #83BD75;\r\n    --colorFormButton: #fff;\r\n    --bcgForm: #e3ebdb;\r\n    --bcgExcursionsItemButtonUpdate: #83BD75;\r\n    --bcgExcursionsItemButtonRemove: #e74c3c;\r\n    --colorExcursionsItemButton: #fff;\r\n    --bcgExcursionsList: #DDFFBC;\r\n}\r\n\r\nbody {\r\n    background-color: var(--bcgBody);\r\n}\r\n\r\nh1 {\r\n    background-color: #52734D;\r\n    color: #fff;\r\n    padding: 10px;\r\n}\r\n\r\n.panel {\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n}\r\n\r\n/* form */\r\n\r\n.form {\r\n    font-weight: 500;\r\n    background-color: var(--bcgForm);\r\n    padding-top: 12px;\r\n}\r\n\r\n.form__label {\r\n    margin-left: 5px;\r\n}\r\n\r\n.form__field, .order__form__field {\r\n    width: 100%;\r\n    resize: vertical;\r\n    height: 25px;\r\n    font-size: 1rem;\r\n    background-color: transparent;\r\n    outline: none;\r\n    border: none;\r\n    border-bottom: 1px solid green;\r\n    padding: 10px;\r\n}\r\n\r\n.form__field {\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.order__field-submit {\r\n    font-size: 1rem;\r\n    padding: 5px 40px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgFormButton);\r\n    color: var(--colorFormButton);\r\n    transition: .2s;\r\n    margin: 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n/* list */\r\n\r\n.panel__excursions {\r\n    padding: 10px;\r\n}\r\n\r\n.excursions__item {\r\n    padding: 10px;\r\n    margin-top: 20px;\r\n    background-color: var(--bcgExcursionsList);\r\n    border-radius: 15px;\r\n}\r\n\r\n.excursions__title, .excursions__description, .excursions__field {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.excursions__description {\r\n    font-weight: 500;\r\n}\r\n\r\n.excursions__field-input--update, .excursions__field-input--remove {\r\n    font-size: 0.9rem;\r\n    padding: 5px 10px;\r\n    font-weight: 500;\r\n    border: none;\r\n    border-radius: 10px;\r\n    background-color: var(--bcgExcursionsItemButtonUpdate);\r\n    color: var(--colorExcursionsItemButton);\r\n    transition: .2s;\r\n    cursor: pointer;\r\n}\r\n\r\n.excursions__field-input--update:hover, .order__field-submit:hover {\r\n    transform: scale(1.05);\r\n    cursor: pointer;\r\n    background-color: green;\r\n}\r\n\r\n.excursions__field-input--remove:hover {\r\n    transform: scale(1.05);\r\n    cursor: pointer;\r\n    background-color: #c0392b;\r\n}\r\n\r\n.excursions__field-input--remove {\r\n    background-color: var(--bcgExcursionsItemButtonRemove);\r\n}\r\n\r\n.excursions__field {\r\n    margin-top: 10px;\r\n}\r\n\r\n\r\n.excursions__item--prototype {\r\n    display: none;\r\n}\r\n\r\n.is-editable{\r\n    border: 3px solid black;\r\n}\r\n\r\n.is-editable  .excursions__title, .is-editable .excursions__description, .is-editable .adults-price, .is-editable .children-price {\r\n    color: #b71540;\r\n}\r\n"],sourceRoot:""}]);const a=s},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var t="",n=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),n&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=r(e),n&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(r,t,n,o,i){"string"==typeof r&&(r=[[null,r,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var u=0;u<r.length;u++){var d=[].concat(r[u]);n&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:r=>{r.exports=function(r){var e=r[1],t=r[3];if(!t)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */"),s=t.sources.map((function(r){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(r," */")}));return[e].concat(s).concat([i]).join("\n")}return[e].join("\n")}},379:r=>{var e=[];function t(r){for(var t=-1,n=0;n<e.length;n++)if(e[n].identifier===r){t=n;break}return t}function n(r,n){for(var i={},s=[],a=0;a<r.length;a++){var c=r[a],u=n.base?c[0]+n.base:c[0],d=i[u]||0,l="".concat(u," ").concat(d);i[u]=d+1;var p=t(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var A=o(f,n);n.byIndex=a,e.splice(a,0,{identifier:l,updater:A,references:1})}s.push(l)}return s}function o(r,e){var t=e.domAPI(e);return t.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;t.update(r=e)}else t.remove()}}r.exports=function(r,o){var i=n(r=r||[],o=o||{});return function(r){r=r||[];for(var s=0;s<i.length;s++){var a=t(i[s]);e[a].references--}for(var c=n(r,o),u=0;u<i.length;u++){var d=t(i[u]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=c}}},569:r=>{var e={};r.exports=function(r,t){var n=function(r){if(void 0===e[r]){var t=document.querySelector(r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(r){t=null}e[r]=t}return e[r]}(r);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}},216:r=>{r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},565:(r,e,t)=>{r.exports=function(r){var e=t.nc;e&&r.setAttribute("nonce",e)}},795:r=>{r.exports=function(r){var e=r.insertStyleElement(r);return{update:function(t){!function(r,e,t){var n="";t.supports&&(n+="@supports (".concat(t.supports,") {")),t.media&&(n+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(n+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),n+=t.css,o&&(n+="}"),t.media&&(n+="}"),t.supports&&(n+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,r,e.options)}(e,r,t)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},589:r=>{r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}}},e={};function t(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,exports:{}};return r[n](i,i.exports,t),i.exports}t.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return t.d(e,{a:e}),e},t.d=(r,e)=>{for(var n in e)t.o(e,n)&&!t.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:e[n]})},t.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),t.nc=void 0,(()=>{var r="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==r&&r,e="URLSearchParams"in r,t="Symbol"in r&&"iterator"in Symbol,n="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(r){return!1}}(),o="FormData"in r,i="ArrayBuffer"in r;if(i)var s=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],a=ArrayBuffer.isView||function(r){return r&&s.indexOf(Object.prototype.toString.call(r))>-1};function c(r){if("string"!=typeof r&&(r=String(r)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(r)||""===r)throw new TypeError('Invalid character in header field name: "'+r+'"');return r.toLowerCase()}function u(r){return"string"!=typeof r&&(r=String(r)),r}function d(r){var e={next:function(){var e=r.shift();return{done:void 0===e,value:e}}};return t&&(e[Symbol.iterator]=function(){return e}),e}function l(r){this.map={},r instanceof l?r.forEach((function(r,e){this.append(e,r)}),this):Array.isArray(r)?r.forEach((function(r){this.append(r[0],r[1])}),this):r&&Object.getOwnPropertyNames(r).forEach((function(e){this.append(e,r[e])}),this)}function p(r){if(r.bodyUsed)return Promise.reject(new TypeError("Already read"));r.bodyUsed=!0}function f(r){return new Promise((function(e,t){r.onload=function(){e(r.result)},r.onerror=function(){t(r.error)}}))}function A(r){var e=new FileReader,t=f(e);return e.readAsArrayBuffer(r),t}function h(r){if(r.slice)return r.slice(0);var e=new Uint8Array(r.byteLength);return e.set(new Uint8Array(r)),e.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(r){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=r,r?"string"==typeof r?this._bodyText=r:n&&Blob.prototype.isPrototypeOf(r)?this._bodyBlob=r:o&&FormData.prototype.isPrototypeOf(r)?this._bodyFormData=r:e&&URLSearchParams.prototype.isPrototypeOf(r)?this._bodyText=r.toString():i&&n&&(t=r)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=h(r.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(r)||a(r))?this._bodyArrayBuffer=h(r):this._bodyText=r=Object.prototype.toString.call(r):this._bodyText="",this.headers.get("content-type")||("string"==typeof r?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):e&&URLSearchParams.prototype.isPrototypeOf(r)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n&&(this.blob=function(){var r=p(this);if(r)return r;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(A)}),this.text=function(){var r,e,t,n=p(this);if(n)return n;if(this._bodyBlob)return r=this._bodyBlob,t=f(e=new FileReader),e.readAsText(r),t;if(this._bodyArrayBuffer)return Promise.resolve(function(r){for(var e=new Uint8Array(r),t=new Array(e.length),n=0;n<e.length;n++)t[n]=String.fromCharCode(e[n]);return t.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}l.prototype.append=function(r,e){r=c(r),e=u(e);var t=this.map[r];this.map[r]=t?t+", "+e:e},l.prototype.delete=function(r){delete this.map[c(r)]},l.prototype.get=function(r){return r=c(r),this.has(r)?this.map[r]:null},l.prototype.has=function(r){return this.map.hasOwnProperty(c(r))},l.prototype.set=function(r,e){this.map[c(r)]=u(e)},l.prototype.forEach=function(r,e){for(var t in this.map)this.map.hasOwnProperty(t)&&r.call(e,this.map[t],t,this)},l.prototype.keys=function(){var r=[];return this.forEach((function(e,t){r.push(t)})),d(r)},l.prototype.values=function(){var r=[];return this.forEach((function(e){r.push(e)})),d(r)},l.prototype.entries=function(){var r=[];return this.forEach((function(e,t){r.push([t,e])})),d(r)},t&&(l.prototype[Symbol.iterator]=l.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function m(r,e){if(!(this instanceof m))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var t,n,o=(e=e||{}).body;if(r instanceof m){if(r.bodyUsed)throw new TypeError("Already read");this.url=r.url,this.credentials=r.credentials,e.headers||(this.headers=new l(r.headers)),this.method=r.method,this.mode=r.mode,this.signal=r.signal,o||null==r._bodyInit||(o=r._bodyInit,r.bodyUsed=!0)}else this.url=String(r);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new l(e.headers)),this.method=(n=(t=e.method||this.method||"GET").toUpperCase(),b.indexOf(n)>-1?n:t),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var i=/([?&])_=[^&]*/;i.test(this.url)?this.url=this.url.replace(i,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function g(r){var e=new FormData;return r.trim().split("&").forEach((function(r){if(r){var t=r.split("="),n=t.shift().replace(/\+/g," "),o=t.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function B(r,e){if(!(this instanceof B))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new l(e.headers),this.url=e.url||"",this._initBody(r)}m.prototype.clone=function(){return new m(this,{body:this._bodyInit})},y.call(m.prototype),y.call(B.prototype),B.prototype.clone=function(){return new B(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new l(this.headers),url:this.url})},B.error=function(){var r=new B(null,{status:0,statusText:""});return r.type="error",r};var v=[301,302,303,307,308];B.redirect=function(r,e){if(-1===v.indexOf(e))throw new RangeError("Invalid status code");return new B(null,{status:e,headers:{location:r}})};var x=r.DOMException;try{new x}catch(r){(x=function(r,e){this.message=r,this.name=e;var t=Error(r);this.stack=t.stack}).prototype=Object.create(Error.prototype),x.prototype.constructor=x}function _(e,t){return new Promise((function(o,s){var a=new m(e,t);if(a.signal&&a.signal.aborted)return s(new x("Aborted","AbortError"));var c=new XMLHttpRequest;function d(){c.abort()}c.onload=function(){var r,e,t={status:c.status,statusText:c.statusText,headers:(r=c.getAllResponseHeaders()||"",e=new l,r.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(r){return 0===r.indexOf("\n")?r.substr(1,r.length):r})).forEach((function(r){var t=r.split(":"),n=t.shift().trim();if(n){var o=t.join(":").trim();e.append(n,o)}})),e)};t.url="responseURL"in c?c.responseURL:t.headers.get("X-Request-URL");var n="response"in c?c.response:c.responseText;setTimeout((function(){o(new B(n,t))}),0)},c.onerror=function(){setTimeout((function(){s(new TypeError("Network request failed"))}),0)},c.ontimeout=function(){setTimeout((function(){s(new TypeError("Network request failed"))}),0)},c.onabort=function(){setTimeout((function(){s(new x("Aborted","AbortError"))}),0)},c.open(a.method,function(e){try{return""===e&&r.location.href?r.location.href:e}catch(r){return e}}(a.url),!0),"include"===a.credentials?c.withCredentials=!0:"omit"===a.credentials&&(c.withCredentials=!1),"responseType"in c&&(n?c.responseType="blob":i&&a.headers.get("Content-Type")&&-1!==a.headers.get("Content-Type").indexOf("application/octet-stream")&&(c.responseType="arraybuffer")),!t||"object"!=typeof t.headers||t.headers instanceof l?a.headers.forEach((function(r,e){c.setRequestHeader(e,r)})):Object.getOwnPropertyNames(t.headers).forEach((function(r){c.setRequestHeader(r,u(t.headers[r]))})),a.signal&&(a.signal.addEventListener("abort",d),c.onreadystatechange=function(){4===c.readyState&&a.signal.removeEventListener("abort",d)}),c.send(void 0===a._bodyInit?null:a._bodyInit)}))}_.polyfill=!0,r.fetch||(r.fetch=_,r.Headers=l,r.Request=m,r.Response=B)})(),(()=>{var r=t(379),e=t.n(r),n=t(795),o=t.n(n),i=t(569),s=t.n(i),a=t(565),c=t.n(a),u=t(216),d=t.n(u),l=t(589),p=t.n(l),f=t(27),A={};A.styleTagTransform=p(),A.setAttributes=c(),A.insert=s().bind(null,"head"),A.domAPI=o(),A.insertStyleElement=d(),e()(f.Z,A),f.Z&&f.Z.locals&&f.Z.locals;const h=new class{loadData(r){return fetch(r).then((r=>r.ok?r.json():Promise.reject(r)))}addData(r,e){const t={method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json"}};return fetch(e,t).then((r=>console.log(r))).catch((r=>console.error(r)))}removeData(r,e){return fetch(`${r}/${e}`,{method:"DELETE"}).then((r=>console.log(r))).catch((r=>console.error(r)))}updateData(r,e,t){const n={method:"PUT",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}};return fetch(`${r}/${e}`,n).then((r=>console.log(r))).catch((r=>console.log(r)))}};document.addEventListener("DOMContentLoaded",(function(){console.log("client"),b(),document.querySelector(".panel__excursions").addEventListener("click",(r=>{r.preventDefault();const e=r.target;if(e.classList.contains("excursions__field-input--remove")){const r=e.parentElement.parentElement.parentElement.dataset.id;h.removeData(y,r).finally(b)}})),document.querySelector(".form").addEventListener("submit",(r=>{r.preventDefault();const{title:e,description:t,adultPrice:n,childrenPrice:o}=r.target,i={title:e.value,description:t.value,adultPrice:n.value,childrenPrice:o.value},s=[];!function(r,e){for(const t in e)""===e[t]&&r.push("error")}(s,i),s.length>0?alert("Uzupełnij wszystkie dane!"):(h.addData(i,y).finally(b),function(r,e,t,n){r.value="",e.value="",t.value="",n.value=""}(e,t,n,o))})),document.querySelector(".excursions").addEventListener("click",(r=>{const e=r.target,t=e.parentElement.parentElement.parentElement,n=t.querySelector(".excursions__field-input--update");if(e===n){console.log(n),r.preventDefault();const e=t.querySelectorAll("span");[...e].every((r=>r.isContentEditable))?function(r,e,t){const n=t.dataset.id,[o,i,s,a]=e,c={title:o.innerText,description:i.innerText,adultPrice:s.innerText,childrenPrice:a.innerText};h.updateData(y,n,c).finally((()=>{r.value="edytuj",e.forEach((r=>r.contentEditable=!1)),t.classList.remove("is-editable")}))}(n,e,t):function(r,e,t){r.value="zapisz",e.forEach((r=>r.contentEditable=!0)),t.classList.add("is-editable")}(n,e,t)}}))}));const y="https://fake-database-server.herokuapp.com/excursions";function b(){h.loadData(y).then((r=>{!function(r){const e=document.querySelector(".panel__excursions");document.querySelectorAll(".excursions__item").forEach((r=>{r.classList.contains("excursions__item--prototype")||r.remove()}));const t=document.querySelector(".excursions__item--prototype");r.forEach((r=>{const n=t.cloneNode(!0);n.classList.remove("excursions__item--prototype");const o=n.querySelector(".excursions__title"),i=n.querySelector(".excursions__description"),s=n.querySelector(".adults-price"),a=n.querySelector(".children-price");!function(r,e,t,n,o,i){r.dataset.id=i.id,e.textContent=i.title,t.textContent=i.description,n.textContent=i.adultPrice,o.textContent=i.childrenPrice}(n,o,i,s,a,r),e.appendChild(n)}))}(r)})).catch((r=>console.log(r)))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBU2UsR0FDUnBHLE1BQUtsSyxLQU1kLFNBQTBCNlIsR0FDdEIsTUFBTUMsRUFBT3JQLFNBQVNDLGNBQWMsc0JBa0JuQkQsU0FBUzJPLGlCQUFpQixxQkFDbEMvSixTQUFRMEssSUFDUkEsRUFBRzdCLFVBQVVDLFNBQVMsZ0NBQ3ZCNEIsRUFBR2xRLFlBbkJYLE1BQU1tUSxFQUFjdlAsU0FBU0MsY0FBYyxnQ0FDM0NtUCxFQUFjeEssU0FBUTVJLElBQ2xCLE1BQU13VCxFQUFRRCxFQUFZRSxXQUFVLEdBQ3BDRCxFQUFNL0IsVUFBVXJPLE9BQU8sK0JBQ3ZCLE1BQU1zUSxFQUFhRixFQUFNdlAsY0FBYyxzQkFDakMwUCxFQUFtQkgsRUFBTXZQLGNBQWMsNEJBQ3ZDMlAsRUFBa0JKLEVBQU12UCxjQUFjLGlCQUN0QzRQLEVBQXFCTCxFQUFNdlAsY0FBYyxvQkFpQnZELFNBQTJCNlAsRUFBV0MsRUFBU0MsRUFBZUMsRUFBY0MsRUFBaUJsVSxHQUN6RjhULEVBQVVsQyxRQUFRblMsR0FBS08sRUFBS1AsR0FDNUJzVSxFQUFRSSxZQUFjblUsRUFBSytSLE1BQzNCaUMsRUFBY0csWUFBY25VLEVBQUtnUyxZQUNqQ2lDLEVBQWFFLFlBQWNuVSxFQUFLaVMsV0FDaENpQyxFQUFnQkMsWUFBY25VLEVBQUtrUyxjQXBCL0JrQyxDQUFrQlosRUFBT0UsRUFBWUMsRUFBa0JDLEVBQWlCQyxFQUFvQjdULEdBRTVGcVQsRUFBSzVPLFlBQVkrTyxNQW5CYmEsQ0FBaUI5UyxNQUVwQjRQLE9BQU14QyxHQUFPc0MsUUFBUUMsSUFBSXZDLE8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXNrLWV4Y3VzaW9ucy1hcGkvLi9zcmMvY3NzL2FkbWluLmNzcyIsIndlYnBhY2s6Ly90YXNrLWV4Y3VzaW9ucy1hcGkvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3Rhc2stZXhjdXNpb25zLWFwaS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3Rhc2stZXhjdXNpb25zLWFwaS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90YXNrLWV4Y3VzaW9ucy1hcGkvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3Rhc2stZXhjdXNpb25zLWFwaS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90YXNrLWV4Y3VzaW9ucy1hcGkvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1leGN1c2lvbnMtYXBpLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdGFzay1leGN1c2lvbnMtYXBpLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdGFzay1leGN1c2lvbnMtYXBpL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3Rhc2stZXhjdXNpb25zLWFwaS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90YXNrLWV4Y3VzaW9ucy1hcGkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3Rhc2stZXhjdXNpb25zLWFwaS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Rhc2stZXhjdXNpb25zLWFwaS93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdGFzay1leGN1c2lvbnMtYXBpLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly90YXNrLWV4Y3VzaW9ucy1hcGkvLi9zcmMvY3NzL2FkbWluLmNzcz80NTgzIiwid2VicGFjazovL3Rhc2stZXhjdXNpb25zLWFwaS8uL3NyYy9qcy9FeGN1cnNpb25zQVBJLmpzIiwid2VicGFjazovL3Rhc2stZXhjdXNpb25zLWFwaS8uL3NyYy9qcy9hZG1pbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU1vbnRzZXJyYXQ6d2dodEA0MDA7NTAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCc7XFxyXFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbjpyb290IHtcXHJcXG4gICAgLS1iY2dCb2R5OiAjQjRFMTk3O1xcclxcbiAgICAtLWJjZ0Zvcm1CdXR0b246ICM4M0JENzU7XFxyXFxuICAgIC0tY29sb3JGb3JtQnV0dG9uOiAjZmZmO1xcclxcbiAgICAtLWJjZ0Zvcm06ICNlM2ViZGI7XFxyXFxuICAgIC0tYmNnRXhjdXJzaW9uc0l0ZW1CdXR0b25VcGRhdGU6ICM4M0JENzU7XFxyXFxuICAgIC0tYmNnRXhjdXJzaW9uc0l0ZW1CdXR0b25SZW1vdmU6ICNlNzRjM2M7XFxyXFxuICAgIC0tY29sb3JFeGN1cnNpb25zSXRlbUJ1dHRvbjogI2ZmZjtcXHJcXG4gICAgLS1iY2dFeGN1cnNpb25zTGlzdDogI0RERkZCQztcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJjZ0JvZHkpO1xcclxcbn1cXHJcXG5cXHJcXG5oMSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM1MjczNEQ7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucGFuZWwge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XFxyXFxufVxcclxcblxcclxcbi8qIGZvcm0gKi9cXHJcXG5cXHJcXG4uZm9ybSB7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJjZ0Zvcm0pO1xcclxcbiAgICBwYWRkaW5nLXRvcDogMTJweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm1fX2xhYmVsIHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm1fX2ZpZWxkLCAub3JkZXJfX2Zvcm1fX2ZpZWxkIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHJlc2l6ZTogdmVydGljYWw7XFxyXFxuICAgIGhlaWdodDogMjVweDtcXHJcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gICAgb3V0bGluZTogbm9uZTtcXHJcXG4gICAgYm9yZGVyOiBub25lO1xcclxcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgZ3JlZW47XFxyXFxuICAgIHBhZGRpbmc6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5mb3JtX19maWVsZCB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XFxyXFxufVxcclxcblxcclxcbi5vcmRlcl9fZmllbGQtc3VibWl0IHtcXHJcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcclxcbiAgICBwYWRkaW5nOiA1cHggNDBweDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcXHJcXG4gICAgYm9yZGVyOiBub25lO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iY2dGb3JtQnV0dG9uKTtcXHJcXG4gICAgY29sb3I6IHZhcigtLWNvbG9yRm9ybUJ1dHRvbik7XFxyXFxuICAgIHRyYW5zaXRpb246IC4ycztcXHJcXG4gICAgbWFyZ2luOiAyMHB4O1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi8qIGxpc3QgKi9cXHJcXG5cXHJcXG4ucGFuZWxfX2V4Y3Vyc2lvbnMge1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZXhjdXJzaW9uc19faXRlbSB7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHg7XFxyXFxuICAgIG1hcmdpbi10b3A6IDIwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJjZ0V4Y3Vyc2lvbnNMaXN0KTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTVweDtcXHJcXG59XFxyXFxuXFxyXFxuLmV4Y3Vyc2lvbnNfX3RpdGxlLCAuZXhjdXJzaW9uc19fZGVzY3JpcHRpb24sIC5leGN1cnNpb25zX19maWVsZCB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5leGN1cnNpb25zX19kZXNjcmlwdGlvbiB7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxufVxcclxcblxcclxcbi5leGN1cnNpb25zX19maWVsZC1pbnB1dC0tdXBkYXRlLCAuZXhjdXJzaW9uc19fZmllbGQtaW5wdXQtLXJlbW92ZSB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMC45cmVtO1xcclxcbiAgICBwYWRkaW5nOiA1cHggMTBweDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcXHJcXG4gICAgYm9yZGVyOiBub25lO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iY2dFeGN1cnNpb25zSXRlbUJ1dHRvblVwZGF0ZSk7XFxyXFxuICAgIGNvbG9yOiB2YXIoLS1jb2xvckV4Y3Vyc2lvbnNJdGVtQnV0dG9uKTtcXHJcXG4gICAgdHJhbnNpdGlvbjogLjJzO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5leGN1cnNpb25zX19maWVsZC1pbnB1dC0tdXBkYXRlOmhvdmVyLCAub3JkZXJfX2ZpZWxkLXN1Ym1pdDpob3ZlciB7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wNSk7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XFxyXFxufVxcclxcblxcclxcbi5leGN1cnNpb25zX19maWVsZC1pbnB1dC0tcmVtb3ZlOmhvdmVyIHtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjA1KTtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzAzOTJiO1xcclxcbn1cXHJcXG5cXHJcXG4uZXhjdXJzaW9uc19fZmllbGQtaW5wdXQtLXJlbW92ZSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJjZ0V4Y3Vyc2lvbnNJdGVtQnV0dG9uUmVtb3ZlKTtcXHJcXG59XFxyXFxuXFxyXFxuLmV4Y3Vyc2lvbnNfX2ZpZWxkIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuLmV4Y3Vyc2lvbnNfX2l0ZW0tLXByb3RvdHlwZSB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5pcy1lZGl0YWJsZXtcXHJcXG4gICAgYm9yZGVyOiAzcHggc29saWQgYmxhY2s7XFxyXFxufVxcclxcblxcclxcbi5pcy1lZGl0YWJsZSAgLmV4Y3Vyc2lvbnNfX3RpdGxlLCAuaXMtZWRpdGFibGUgLmV4Y3Vyc2lvbnNfX2Rlc2NyaXB0aW9uLCAuaXMtZWRpdGFibGUgLmFkdWx0cy1wcmljZSwgLmlzLWVkaXRhYmxlIC5jaGlsZHJlbi1wcmljZSB7XFxyXFxuICAgIGNvbG9yOiAjYjcxNTQwO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2FkbWluLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtJQUNJLFNBQVM7SUFDVCxVQUFVO0lBQ1Ysc0JBQXNCO0lBQ3RCLHlCQUF5QjtJQUN6QixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsd0JBQXdCO0lBQ3hCLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsd0NBQXdDO0lBQ3hDLHdDQUF3QztJQUN4QyxpQ0FBaUM7SUFDakMsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0ksZ0NBQWdDO0FBQ3BDOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLFdBQVc7SUFDWCxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLDhCQUE4QjtBQUNsQzs7QUFFQSxTQUFTOztBQUVUO0lBQ0ksZ0JBQWdCO0lBQ2hCLGdDQUFnQztJQUNoQyxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixlQUFlO0lBQ2YsNkJBQTZCO0lBQzdCLGFBQWE7SUFDYixZQUFZO0lBQ1osOEJBQThCO0lBQzlCLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLHNDQUFzQztJQUN0Qyw2QkFBNkI7SUFDN0IsZUFBZTtJQUNmLFlBQVk7SUFDWixlQUFlO0FBQ25COztBQUVBLFNBQVM7O0FBRVQ7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGdCQUFnQjtJQUNoQiwwQ0FBMEM7SUFDMUMsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLG1CQUFtQjtJQUNuQixzREFBc0Q7SUFDdEQsdUNBQXVDO0lBQ3ZDLGVBQWU7SUFDZixlQUFlO0FBQ25COztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLGVBQWU7SUFDZix1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsZUFBZTtJQUNmLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHNEQUFzRDtBQUMxRDs7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQjs7O0FBR0E7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksY0FBYztBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Nb250c2VycmF0OndnaHRANDAwOzUwMCZkaXNwbGF5PXN3YXAnKTtcXHJcXG5cXHJcXG4qIHtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG46cm9vdCB7XFxyXFxuICAgIC0tYmNnQm9keTogI0I0RTE5NztcXHJcXG4gICAgLS1iY2dGb3JtQnV0dG9uOiAjODNCRDc1O1xcclxcbiAgICAtLWNvbG9yRm9ybUJ1dHRvbjogI2ZmZjtcXHJcXG4gICAgLS1iY2dGb3JtOiAjZTNlYmRiO1xcclxcbiAgICAtLWJjZ0V4Y3Vyc2lvbnNJdGVtQnV0dG9uVXBkYXRlOiAjODNCRDc1O1xcclxcbiAgICAtLWJjZ0V4Y3Vyc2lvbnNJdGVtQnV0dG9uUmVtb3ZlOiAjZTc0YzNjO1xcclxcbiAgICAtLWNvbG9yRXhjdXJzaW9uc0l0ZW1CdXR0b246ICNmZmY7XFxyXFxuICAgIC0tYmNnRXhjdXJzaW9uc0xpc3Q6ICNEREZGQkM7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iY2dCb2R5KTtcXHJcXG59XFxyXFxuXFxyXFxuaDEge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTI3MzREO1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnBhbmVsIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBmb3JtICovXFxyXFxuXFxyXFxuLmZvcm0ge1xcclxcbiAgICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iY2dGb3JtKTtcXHJcXG4gICAgcGFkZGluZy10b3A6IDEycHg7XFxyXFxufVxcclxcblxcclxcbi5mb3JtX19sYWJlbCB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XFxyXFxufVxcclxcblxcclxcbi5mb3JtX19maWVsZCwgLm9yZGVyX19mb3JtX19maWVsZCB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICByZXNpemU6IHZlcnRpY2FsO1xcclxcbiAgICBoZWlnaHQ6IDI1cHg7XFxyXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICAgIG91dGxpbmU6IG5vbmU7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGdyZWVuO1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZm9ybV9fZmllbGQge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4ub3JkZXJfX2ZpZWxkLXN1Ym1pdCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG4gICAgcGFkZGluZzogNXB4IDQwcHg7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmNnRm9ybUJ1dHRvbik7XFxyXFxuICAgIGNvbG9yOiB2YXIoLS1jb2xvckZvcm1CdXR0b24pO1xcclxcbiAgICB0cmFuc2l0aW9uOiAuMnM7XFxyXFxuICAgIG1hcmdpbjogMjBweDtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBsaXN0ICovXFxyXFxuXFxyXFxuLnBhbmVsX19leGN1cnNpb25zIHtcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmV4Y3Vyc2lvbnNfX2l0ZW0ge1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iY2dFeGN1cnNpb25zTGlzdCk7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxyXFxufVxcclxcblxcclxcbi5leGN1cnNpb25zX190aXRsZSwgLmV4Y3Vyc2lvbnNfX2Rlc2NyaXB0aW9uLCAuZXhjdXJzaW9uc19fZmllbGQge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZXhjdXJzaW9uc19fZGVzY3JpcHRpb24ge1xcclxcbiAgICBmb250LXdlaWdodDogNTAwO1xcclxcbn1cXHJcXG5cXHJcXG4uZXhjdXJzaW9uc19fZmllbGQtaW5wdXQtLXVwZGF0ZSwgLmV4Y3Vyc2lvbnNfX2ZpZWxkLWlucHV0LS1yZW1vdmUge1xcclxcbiAgICBmb250LXNpemU6IDAuOXJlbTtcXHJcXG4gICAgcGFkZGluZzogNXB4IDEwcHg7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmNnRXhjdXJzaW9uc0l0ZW1CdXR0b25VcGRhdGUpO1xcclxcbiAgICBjb2xvcjogdmFyKC0tY29sb3JFeGN1cnNpb25zSXRlbUJ1dHRvbik7XFxyXFxuICAgIHRyYW5zaXRpb246IC4ycztcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uZXhjdXJzaW9uc19fZmllbGQtaW5wdXQtLXVwZGF0ZTpob3ZlciwgLm9yZGVyX19maWVsZC1zdWJtaXQ6aG92ZXIge1xcclxcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMDUpO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xcclxcbn1cXHJcXG5cXHJcXG4uZXhjdXJzaW9uc19fZmllbGQtaW5wdXQtLXJlbW92ZTpob3ZlciB7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wNSk7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2MwMzkyYjtcXHJcXG59XFxyXFxuXFxyXFxuLmV4Y3Vyc2lvbnNfX2ZpZWxkLWlucHV0LS1yZW1vdmUge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iY2dFeGN1cnNpb25zSXRlbUJ1dHRvblJlbW92ZSk7XFxyXFxufVxcclxcblxcclxcbi5leGN1cnNpb25zX19maWVsZCB7XFxyXFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxyXFxufVxcclxcblxcclxcblxcclxcbi5leGN1cnNpb25zX19pdGVtLS1wcm90b3R5cGUge1xcclxcbiAgICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uaXMtZWRpdGFibGV7XFxyXFxuICAgIGJvcmRlcjogM3B4IHNvbGlkIGJsYWNrO1xcclxcbn1cXHJcXG5cXHJcXG4uaXMtZWRpdGFibGUgIC5leGN1cnNpb25zX190aXRsZSwgLmlzLWVkaXRhYmxlIC5leGN1cnNpb25zX19kZXNjcmlwdGlvbiwgLmlzLWVkaXRhYmxlIC5hZHVsdHMtcHJpY2UsIC5pcy1lZGl0YWJsZSAuY2hpbGRyZW4tcHJpY2Uge1xcclxcbiAgICBjb2xvcjogI2I3MTU0MDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJ2YXIgZ2xvYmFsID1cbiAgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzKSB8fFxuICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYpIHx8XG4gICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpXG5cbnZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIGdsb2JhbCxcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIGdsb2JhbCAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgYmxvYjpcbiAgICAnRmlsZVJlYWRlcicgaW4gZ2xvYmFsICYmXG4gICAgJ0Jsb2InIGluIGdsb2JhbCAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gZ2xvYmFsLFxuICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBnbG9iYWxcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH4hXS9pLnRlc3QobmFtZSkgfHwgbmFtZSA9PT0gJycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZTogXCInICsgbmFtZSArICdcIicpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICB9XG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGl0ZW1zLnB1c2godmFsdWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbn1cblxuZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJylcbn1cblxuZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gIGlmIChidWYuc2xpY2UpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gIH0gZWxzZSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICB9XG59XG5cbmZ1bmN0aW9uIEJvZHkoKSB7XG4gIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgIC8qXG4gICAgICBmZXRjaC1tb2NrIHdyYXBzIHRoZSBSZXNwb25zZSBvYmplY3QgaW4gYW4gRVM2IFByb3h5IHRvXG4gICAgICBwcm92aWRlIHVzZWZ1bCB0ZXN0IGhhcm5lc3MgZmVhdHVyZXMgc3VjaCBhcyBmbHVzaC4gSG93ZXZlciwgb25cbiAgICAgIEVTNSBicm93c2VycyB3aXRob3V0IGZldGNoIG9yIFByb3h5IHN1cHBvcnQgcG9sbHlmaWxscyBtdXN0IGJlIHVzZWQ7XG4gICAgICB0aGUgcHJveHktcG9sbHlmaWxsIGlzIHVuYWJsZSB0byBwcm94eSBhbiBhdHRyaWJ1dGUgdW5sZXNzIGl0IGV4aXN0c1xuICAgICAgb24gdGhlIG9iamVjdCBiZWZvcmUgdGhlIFByb3h5IGlzIGNyZWF0ZWQuIFRoaXMgY2hhbmdlIGVuc3VyZXNcbiAgICAgIFJlc3BvbnNlLmJvZHlVc2VkIGV4aXN0cyBvbiB0aGUgaW5zdGFuY2UsIHdoaWxlIG1haW50YWluaW5nIHRoZVxuICAgICAgc2VtYW50aWMgb2Ygc2V0dGluZyBSZXF1ZXN0LmJvZHlVc2VkIGluIHRoZSBjb25zdHJ1Y3RvciBiZWZvcmVcbiAgICAgIF9pbml0Qm9keSBpcyBjYWxsZWQuXG4gICAgKi9cbiAgICB0aGlzLmJvZHlVc2VkID0gdGhpcy5ib2R5VXNlZFxuICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgIGlmICghYm9keSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICB2YXIgaXNDb25zdW1lZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChpc0NvbnN1bWVkKSB7XG4gICAgICAgICAgcmV0dXJuIGlzQ29uc3VtZWRcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ1ZmZlci5zbGljZShcbiAgICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQsXG4gICAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlT2Zmc2V0ICsgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVxdWVzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbFxuICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gIH1cbiAgdGhpcy5faW5pdEJvZHkoYm9keSlcblxuICBpZiAodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpIHtcbiAgICBpZiAob3B0aW9ucy5jYWNoZSA9PT0gJ25vLXN0b3JlJyB8fCBvcHRpb25zLmNhY2hlID09PSAnbm8tY2FjaGUnKSB7XG4gICAgICAvLyBTZWFyY2ggZm9yIGEgJ18nIHBhcmFtZXRlciBpbiB0aGUgcXVlcnkgc3RyaW5nXG4gICAgICB2YXIgcmVQYXJhbVNlYXJjaCA9IC8oWz8mXSlfPVteJl0qL1xuICAgICAgaWYgKHJlUGFyYW1TZWFyY2gudGVzdCh0aGlzLnVybCkpIHtcbiAgICAgICAgLy8gSWYgaXQgYWxyZWFkeSBleGlzdHMgdGhlbiBzZXQgdGhlIHZhbHVlIHdpdGggdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICB0aGlzLnVybCA9IHRoaXMudXJsLnJlcGxhY2UocmVQYXJhbVNlYXJjaCwgJyQxXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGEgbmV3ICdfJyBwYXJhbWV0ZXIgdG8gdGhlIGVuZCB3aXRoIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgdmFyIHJlUXVlcnlTdHJpbmcgPSAvXFw/L1xuICAgICAgICB0aGlzLnVybCArPSAocmVRdWVyeVN0cmluZy50ZXN0KHRoaXMudXJsKSA/ICcmJyA6ICc/JykgKyAnXz0nICsgbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gZm9ybVxufVxuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICAvLyBBdm9pZGluZyBzcGxpdCB2aWEgcmVnZXggdG8gd29yayBhcm91bmQgYSBjb21tb24gSUUxMSBidWcgd2l0aCB0aGUgY29yZS1qcyAzLjYuMCByZWdleCBwb2x5ZmlsbFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2l0aHViL2ZldGNoL2lzc3Vlcy83NDhcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzc1MVxuICBwcmVQcm9jZXNzZWRIZWFkZXJzXG4gICAgLnNwbGl0KCdcXHInKVxuICAgIC5tYXAoZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICByZXR1cm4gaGVhZGVyLmluZGV4T2YoJ1xcbicpID09PSAwID8gaGVhZGVyLnN1YnN0cigxLCBoZWFkZXIubGVuZ3RoKSA6IGhlYWRlclxuICAgIH0pXG4gICAgLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbkJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNwb25zZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXNcbiAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICB0aGlzLnN0YXR1c1RleHQgPSBvcHRpb25zLnN0YXR1c1RleHQgPT09IHVuZGVmaW5lZCA/ICcnIDogJycgKyBvcHRpb25zLnN0YXR1c1RleHRcbiAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxufVxuXG5Cb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG5SZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgdXJsOiB0aGlzLnVybFxuICB9KVxufVxuXG5SZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICByZXR1cm4gcmVzcG9uc2Vcbn1cblxudmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cblJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxufVxuXG5leHBvcnQgdmFyIERPTUV4Y2VwdGlvbiA9IGdsb2JhbC5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZml4VXJsKHVybCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVybCA9PT0gJycgJiYgZ2xvYmFsLmxvY2F0aW9uLmhyZWYgPyBnbG9iYWwubG9jYXRpb24uaHJlZiA6IHVybFxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gdXJsXG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIGZpeFVybChyZXF1ZXN0LnVybCksIHRydWUpXG5cbiAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyKSB7XG4gICAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHN1cHBvcnQuYXJyYXlCdWZmZXIgJiZcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgJiZcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykuaW5kZXhPZignYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJykgIT09IC0xXG4gICAgICApIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcidcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5pdCAmJiB0eXBlb2YgaW5pdC5oZWFkZXJzID09PSAnb2JqZWN0JyAmJiAhKGluaXQuaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhpbml0LmhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCBub3JtYWxpemVWYWx1ZShpbml0LmhlYWRlcnNbbmFtZV0pKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcblxuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBET05FIChzdWNjZXNzIG9yIGZhaWx1cmUpXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICB9KVxufVxuXG5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcblxuaWYgKCFnbG9iYWwuZmV0Y2gpIHtcbiAgZ2xvYmFsLmZldGNoID0gZmV0Y2hcbiAgZ2xvYmFsLkhlYWRlcnMgPSBIZWFkZXJzXG4gIGdsb2JhbC5SZXF1ZXN0ID0gUmVxdWVzdFxuICBnbG9iYWwuUmVzcG9uc2UgPSBSZXNwb25zZVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FkbWluLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYWRtaW4uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY2xhc3MgRXhjdXJzaW9uc0FQSSB7XHJcbiAgICBsb2FkRGF0YSh1cmwpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2godXJsKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3AuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3ApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFkZERhdGEoZGF0YSwgdXJsKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBmZXRjaCh1cmwsIG9wdGlvbnMpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4gY29uc29sZS5sb2cocmVzcCkpXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKVxyXG4gICAgfVxyXG4gICAgcmVtb3ZlRGF0YSh1cmwsIGlkKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURSdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmV0Y2goYCR7dXJsfS8ke2lkfWAsIG9wdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwID0+IGNvbnNvbGUubG9nKHJlc3ApKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpXHJcbiAgICB9XHJcbiAgICB1cGRhdGVEYXRhKHVybCwgaWQsIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKGAke3VybH0vJHtpZH1gLCBvcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4gY29uc29sZS5sb2cocmVzcCkpXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXhjdXJzaW9uc0FQSTsiLCJpbXBvcnQgJy4vLi4vY3NzL2FkbWluLmNzcyc7XHJcblxyXG5pbXBvcnQgRXhjdXJzaW9uc0FQSSBmcm9tICcuL0V4Y3Vyc2lvbnNBUEknO1xyXG5cclxuY29uc3QgYXBpID0gbmV3IEV4Y3Vyc2lvbnNBUEkoKTtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBpbml0KTtcclxuY29uc3QgYXBpRXhjdXJzaW9ucyA9ICdodHRwczovL2Zha2UtZGF0YWJhc2Utc2VydmVyLmhlcm9rdWFwcC5jb20vZXhjdXJzaW9ucyc7XHJcblxyXG5mdW5jdGlvbiBpbml0KCkge1xyXG4gICAgY29uc29sZS5sb2coJ2NsaWVudCcpO1xyXG5cclxuICAgIGxvYWRFeGN1cnNpb25zKCk7XHJcbiAgICByZW1vdmVFeGN1cnNpb25zKCk7XHJcbiAgICBhZGRFeGN1cnNpb25zKCk7XHJcbiAgICB1cGRhdGVFeGN1cnNpb25zKCk7XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gbG9hZEV4Y3Vyc2lvbnMoKSB7XHJcbiAgICBhcGkubG9hZERhdGEoYXBpRXhjdXJzaW9ucylcclxuICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgaW5zZXJ0RXhjdXJzaW9ucyhkYXRhKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5zZXJ0RXhjdXJzaW9ucyhleGN1cnNpb25zQXJyKSB7XHJcbiAgICBjb25zdCB1bEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhbmVsX19leGN1cnNpb25zJyk7XHJcbiAgICByZW1vdmVQcm90b3R5cGUoKTtcclxuICAgIGNvbnN0IGxpUHJvdG90eXBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmV4Y3Vyc2lvbnNfX2l0ZW0tLXByb3RvdHlwZScpXHJcbiAgICBleGN1cnNpb25zQXJyLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmV3TGkgPSBsaVByb3RvdHlwZS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgbmV3TGkuY2xhc3NMaXN0LnJlbW92ZSgnZXhjdXJzaW9uc19faXRlbS0tcHJvdG90eXBlJyk7XHJcbiAgICAgICAgY29uc3QgbmV3TGlUaXRsZSA9IG5ld0xpLnF1ZXJ5U2VsZWN0b3IoJy5leGN1cnNpb25zX190aXRsZScpO1xyXG4gICAgICAgIGNvbnN0IG5ld0xpRGVzY3JpcHRpb24gPSBuZXdMaS5xdWVyeVNlbGVjdG9yKCcuZXhjdXJzaW9uc19fZGVzY3JpcHRpb24nKTtcclxuICAgICAgICBjb25zdCBuZXdMaUFkdWx0UHJpY2UgPSBuZXdMaS5xdWVyeVNlbGVjdG9yKCcuYWR1bHRzLXByaWNlJyk7XHJcbiAgICAgICAgY29uc3QgbmV3TGlDaGlsZHJlblByaWNlID0gbmV3TGkucXVlcnlTZWxlY3RvcignLmNoaWxkcmVuLXByaWNlJyk7XHJcblxyXG4gICAgICAgIGdldERhdGFFeGN1cnNpb25zKG5ld0xpLCBuZXdMaVRpdGxlLCBuZXdMaURlc2NyaXB0aW9uLCBuZXdMaUFkdWx0UHJpY2UsIG5ld0xpQ2hpbGRyZW5QcmljZSwgaXRlbSk7XHJcblxyXG4gICAgICAgIHVsRWwuYXBwZW5kQ2hpbGQobmV3TGkpO1xyXG4gICAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlUHJvdG90eXBlKCkge1xyXG4gICAgY29uc3QgbGlFbExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZXhjdXJzaW9uc19faXRlbScpO1xyXG4gICAgbGlFbExpc3QuZm9yRWFjaChsaSA9PiB7XHJcbiAgICAgICAgaWYgKCFsaS5jbGFzc0xpc3QuY29udGFpbnMoJ2V4Y3Vyc2lvbnNfX2l0ZW0tLXByb3RvdHlwZScpKSB7XHJcbiAgICAgICAgICAgIGxpLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldERhdGFFeGN1cnNpb25zKGxpRGF0YXNldCwgbGlUaXRsZSwgbGlEZXNjcmlwdGlvbiwgbGlBZHVsdFByaWNlLCBsaUNoaWxkcmVuUHJpY2UsIGl0ZW0pIHtcclxuICAgIGxpRGF0YXNldC5kYXRhc2V0LmlkID0gaXRlbS5pZDtcclxuICAgIGxpVGl0bGUudGV4dENvbnRlbnQgPSBpdGVtLnRpdGxlO1xyXG4gICAgbGlEZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IGl0ZW0uZGVzY3JpcHRpb247XHJcbiAgICBsaUFkdWx0UHJpY2UudGV4dENvbnRlbnQgPSBpdGVtLmFkdWx0UHJpY2U7XHJcbiAgICBsaUNoaWxkcmVuUHJpY2UudGV4dENvbnRlbnQgPSBpdGVtLmNoaWxkcmVuUHJpY2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZUV4Y3Vyc2lvbnMoKSB7XHJcbiAgICBjb25zdCB1bEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhbmVsX19leGN1cnNpb25zJyk7XHJcbiAgICB1bEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XHJcbiAgICAgICAgaWYgKHRhcmdldEVsLmNsYXNzTGlzdC5jb250YWlucygnZXhjdXJzaW9uc19fZmllbGQtaW5wdXQtLXJlbW92ZScpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpRWwgPSB0YXJnZXRFbC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3QgaWQgPSBsaUVsLmRhdGFzZXQuaWQ7XHJcbiAgICAgICAgICAgIGFwaS5yZW1vdmVEYXRhKGFwaUV4Y3Vyc2lvbnMsIGlkKVxyXG4gICAgICAgICAgICAgICAgLmZpbmFsbHkobG9hZEV4Y3Vyc2lvbnMpXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkRXhjdXJzaW9ucygpIHtcclxuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybScpO1xyXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBlID0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICBhZHVsdFByaWNlLFxyXG4gICAgICAgICAgICBjaGlsZHJlblByaWNlXHJcbiAgICAgICAgfSA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZS52YWx1ZSxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLnZhbHVlLFxyXG4gICAgICAgICAgICBhZHVsdFByaWNlOiBhZHVsdFByaWNlLnZhbHVlLFxyXG4gICAgICAgICAgICBjaGlsZHJlblByaWNlOiBjaGlsZHJlblByaWNlLnZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcclxuICAgICAgICBjaGVja0Vycm9ycyhlcnJvcnMsIGRhdGEpO1xyXG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBhbGVydCgnVXp1cGXFgm5paiB3c3p5c3RraWUgZGFuZSEnKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFwaS5hZGREYXRhKGRhdGEsIGFwaUV4Y3Vyc2lvbnMpXHJcbiAgICAgICAgICAgICAgICAuZmluYWxseShsb2FkRXhjdXJzaW9ucyk7XHJcbiAgICAgICAgICAgIGNsZWFySW5wdXRzKHRpdGxlLCBkZXNjcmlwdGlvbiwgYWR1bHRQcmljZSwgY2hpbGRyZW5QcmljZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrRXJyb3JzKGVycm9yc0Fyciwga2V5KSB7XHJcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4ga2V5KSB7XHJcbiAgICAgICAgaWYgKGtleVtwcm9wXSA9PT0gJycpIHtcclxuICAgICAgICAgICAgZXJyb3JzQXJyLnB1c2goJ2Vycm9yJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhcklucHV0cyh0aXRsZSwgZGVzY3JpcHRpb24sIGFkdWx0UHJpY2UsIGNoaWxkcmVuUHJpY2UpIHtcclxuICAgIHRpdGxlLnZhbHVlID0gJyc7XHJcbiAgICBkZXNjcmlwdGlvbi52YWx1ZSA9ICcnO1xyXG4gICAgYWR1bHRQcmljZS52YWx1ZSA9ICcnO1xyXG4gICAgY2hpbGRyZW5QcmljZS52YWx1ZSA9ICcnO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVFeGN1cnNpb25zKCkge1xyXG4gICAgY29uc3QgdWxFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5leGN1cnNpb25zJyk7XHJcbiAgICB1bEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcclxuICAgICAgICBjb25zdCBsaUVsID0gdGFyZ2V0RWwucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0gbGlFbC5xdWVyeVNlbGVjdG9yKCcuZXhjdXJzaW9uc19fZmllbGQtaW5wdXQtLXVwZGF0ZScpO1xyXG4gICAgICAgIGlmICh0YXJnZXRFbCA9PT0gYnV0dG9uKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGJ1dHRvbilcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjb25zdCBzcGFuTGlzdCA9IGxpRWwucXVlcnlTZWxlY3RvckFsbCgnc3BhbicpO1xyXG4gICAgICAgICAgICBjb25zdCBpc0VkaXRhYmxlID0gWy4uLnNwYW5MaXN0XS5ldmVyeShzcGFuID0+IHNwYW4uaXNDb250ZW50RWRpdGFibGUpO1xyXG4gICAgICAgICAgICBpZiAoaXNFZGl0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgc3BhbklzRWRpdGFibGUoYnV0dG9uLCBzcGFuTGlzdCwgbGlFbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzcGFuSXNOb3RFZGl0YWJsZShidXR0b24sIHNwYW5MaXN0LCBsaUVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNwYW5Jc0VkaXRhYmxlKGJ1dHRvbiwgc3Bhbkxpc3QsIGxpRWwpIHtcclxuICAgIGNvbnN0IGlkID0gbGlFbC5kYXRhc2V0LmlkO1xyXG4gICAgY29uc3QgW3RpdGxlLCBkZXNjcmlwdGlvbiwgYWR1bHRQcmljZSwgY2hpbGRyZW5QcmljZV0gPSBzcGFuTGlzdDtcclxuICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgdGl0bGU6IHRpdGxlLmlubmVyVGV4dCxcclxuICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24uaW5uZXJUZXh0LFxyXG4gICAgICAgIGFkdWx0UHJpY2U6IGFkdWx0UHJpY2UuaW5uZXJUZXh0LFxyXG4gICAgICAgIGNoaWxkcmVuUHJpY2U6IGNoaWxkcmVuUHJpY2UuaW5uZXJUZXh0XHJcbiAgICB9XHJcbiAgICBhcGkudXBkYXRlRGF0YShhcGlFeGN1cnNpb25zLCBpZCwgZGF0YSlcclxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbi52YWx1ZSA9ICdlZHl0dWonO1xyXG4gICAgICAgICAgICBzcGFuTGlzdC5mb3JFYWNoKHNwYW4gPT4gc3Bhbi5jb250ZW50RWRpdGFibGUgPSBmYWxzZSk7XHJcbiAgICAgICAgICAgIGxpRWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZWRpdGFibGUnKTtcclxuICAgICAgICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBzcGFuSXNOb3RFZGl0YWJsZShidXR0b24sIHNwYW5MaXN0LCBsaUVsKSB7XHJcbiAgICBidXR0b24udmFsdWUgPSAnemFwaXN6JztcclxuICAgIHNwYW5MaXN0LmZvckVhY2goc3BhbiA9PiBzcGFuLmNvbnRlbnRFZGl0YWJsZSA9IHRydWUpO1xyXG4gICAgbGlFbC5jbGFzc0xpc3QuYWRkKCdpcy1lZGl0YWJsZScpO1xyXG59Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImdsb2JhbCIsImdsb2JhbFRoaXMiLCJzZWxmIiwic3VwcG9ydCIsIlN5bWJvbCIsIkJsb2IiLCJ2aWV3Q2xhc3NlcyIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpbmRleE9mIiwibm9ybWFsaXplTmFtZSIsIm5hbWUiLCJTdHJpbmciLCJ0ZXN0IiwiVHlwZUVycm9yIiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVWYWx1ZSIsInZhbHVlIiwiaXRlcmF0b3JGb3IiLCJpdGVtcyIsIml0ZXJhdG9yIiwibmV4dCIsInNoaWZ0IiwiZG9uZSIsIkhlYWRlcnMiLCJoZWFkZXJzIiwiZm9yRWFjaCIsImFwcGVuZCIsIkFycmF5IiwiaXNBcnJheSIsImhlYWRlciIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25zdW1lZCIsImJvZHkiLCJib2R5VXNlZCIsIlByb21pc2UiLCJyZWplY3QiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZXNvbHZlIiwib25sb2FkIiwib25lcnJvciIsImVycm9yIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJwcm9taXNlIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJidWZmZXJDbG9uZSIsImJ1ZiIsInNsaWNlIiwidmlldyIsIlVpbnQ4QXJyYXkiLCJieXRlTGVuZ3RoIiwic2V0IiwiYnVmZmVyIiwiQm9keSIsIl9pbml0Qm9keSIsIl9ib2R5SW5pdCIsIl9ib2R5VGV4dCIsImlzUHJvdG90eXBlT2YiLCJfYm9keUJsb2IiLCJGb3JtRGF0YSIsIl9ib2R5Rm9ybURhdGEiLCJVUkxTZWFyY2hQYXJhbXMiLCJEYXRhVmlldyIsIl9ib2R5QXJyYXlCdWZmZXIiLCJ0eXBlIiwicmVqZWN0ZWQiLCJhcnJheUJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJ0aGVuIiwidGV4dCIsInJlYWRBc1RleHQiLCJjaGFycyIsImZyb21DaGFyQ29kZSIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImZvcm1EYXRhIiwiZGVjb2RlIiwianNvbiIsInBhcnNlIiwib2xkVmFsdWUiLCJoYXMiLCJjYWxsYmFjayIsInRoaXNBcmciLCJrZXlzIiwidmFsdWVzIiwiZW50cmllcyIsIm1ldGhvZHMiLCJSZXF1ZXN0IiwiaW5wdXQiLCJtZXRob2QiLCJ1cGNhc2VkIiwidXJsIiwiY3JlZGVudGlhbHMiLCJtb2RlIiwic2lnbmFsIiwidG9VcHBlckNhc2UiLCJyZWZlcnJlciIsImNhY2hlIiwicmVQYXJhbVNlYXJjaCIsInJlcGxhY2UiLCJEYXRlIiwiZ2V0VGltZSIsImZvcm0iLCJ0cmltIiwic3BsaXQiLCJieXRlcyIsImRlY29kZVVSSUNvbXBvbmVudCIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJzdGF0dXMiLCJvayIsInN0YXR1c1RleHQiLCJjbG9uZSIsInJlc3BvbnNlIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsImxvY2F0aW9uIiwiRE9NRXhjZXB0aW9uIiwiZXJyIiwibWVzc2FnZSIsInN0YWNrIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJmZXRjaCIsImluaXQiLCJyZXF1ZXN0IiwiYWJvcnRlZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiYWJvcnRYaHIiLCJhYm9ydCIsInJhd0hlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzdWJzdHIiLCJsaW5lIiwicGFydHMiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlVGV4dCIsInNldFRpbWVvdXQiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwib3BlbiIsImhyZWYiLCJmaXhVcmwiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXNwb25zZVR5cGUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2VuZCIsInBvbHlmaWxsIiwibG9hZERhdGEiLCJyZXNwIiwiYWRkRGF0YSIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsInJlbW92ZURhdGEiLCJ1cGRhdGVEYXRhIiwibG9hZEV4Y3Vyc2lvbnMiLCJwcmV2ZW50RGVmYXVsdCIsInRhcmdldEVsIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJwYXJlbnRFbGVtZW50IiwiZGF0YXNldCIsImFwaUV4Y3Vyc2lvbnMiLCJmaW5hbGx5IiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImFkdWx0UHJpY2UiLCJjaGlsZHJlblByaWNlIiwiZXJyb3JzIiwiZXJyb3JzQXJyIiwiY2hlY2tFcnJvcnMiLCJhbGVydCIsImNsZWFySW5wdXRzIiwibGlFbCIsImJ1dHRvbiIsInNwYW5MaXN0IiwicXVlcnlTZWxlY3RvckFsbCIsImV2ZXJ5Iiwic3BhbiIsImlzQ29udGVudEVkaXRhYmxlIiwiaW5uZXJUZXh0IiwiY29udGVudEVkaXRhYmxlIiwic3BhbklzRWRpdGFibGUiLCJhZGQiLCJzcGFuSXNOb3RFZGl0YWJsZSIsImV4Y3Vyc2lvbnNBcnIiLCJ1bEVsIiwibGkiLCJsaVByb3RvdHlwZSIsIm5ld0xpIiwiY2xvbmVOb2RlIiwibmV3TGlUaXRsZSIsIm5ld0xpRGVzY3JpcHRpb24iLCJuZXdMaUFkdWx0UHJpY2UiLCJuZXdMaUNoaWxkcmVuUHJpY2UiLCJsaURhdGFzZXQiLCJsaVRpdGxlIiwibGlEZXNjcmlwdGlvbiIsImxpQWR1bHRQcmljZSIsImxpQ2hpbGRyZW5QcmljZSIsInRleHRDb250ZW50IiwiZ2V0RGF0YUV4Y3Vyc2lvbnMiLCJpbnNlcnRFeGN1cnNpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==